// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/scorum/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgConvertSCR2SP struct {
	Owner  string         `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Amount types.IntProto `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgConvertSCR2SP) Reset()         { *m = MsgConvertSCR2SP{} }
func (m *MsgConvertSCR2SP) String() string { return proto.CompactTextString(m) }
func (*MsgConvertSCR2SP) ProtoMessage()    {}
func (*MsgConvertSCR2SP) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{0}
}
func (m *MsgConvertSCR2SP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertSCR2SP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertSCR2SP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertSCR2SP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertSCR2SP.Merge(m, src)
}
func (m *MsgConvertSCR2SP) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertSCR2SP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertSCR2SP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertSCR2SP proto.InternalMessageInfo

func (m *MsgConvertSCR2SP) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgConvertSCR2SP) GetAmount() types.IntProto {
	if m != nil {
		return m.Amount
	}
	return types.IntProto{}
}

type MsgConvertSCR2SPResponse struct {
}

func (m *MsgConvertSCR2SPResponse) Reset()         { *m = MsgConvertSCR2SPResponse{} }
func (m *MsgConvertSCR2SPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertSCR2SPResponse) ProtoMessage()    {}
func (*MsgConvertSCR2SPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{1}
}
func (m *MsgConvertSCR2SPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertSCR2SPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertSCR2SPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertSCR2SPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertSCR2SPResponse.Merge(m, src)
}
func (m *MsgConvertSCR2SPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertSCR2SPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertSCR2SPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertSCR2SPResponse proto.InternalMessageInfo

type MsgWithdrawSP struct {
	Owner     string         `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Recipient string         `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    types.IntProto `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawSP) Reset()         { *m = MsgWithdrawSP{} }
func (m *MsgWithdrawSP) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawSP) ProtoMessage()    {}
func (*MsgWithdrawSP) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{2}
}
func (m *MsgWithdrawSP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawSP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawSP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawSP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawSP.Merge(m, src)
}
func (m *MsgWithdrawSP) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawSP) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawSP.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawSP proto.InternalMessageInfo

func (m *MsgWithdrawSP) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgWithdrawSP) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgWithdrawSP) GetAmount() types.IntProto {
	if m != nil {
		return m.Amount
	}
	return types.IntProto{}
}

type MsgWithdrawSPResponse struct {
	WithdrawalId string `protobuf:"bytes,1,opt,name=withdrawal_id,json=withdrawalId,proto3" json:"withdrawal_id,omitempty"`
}

func (m *MsgWithdrawSPResponse) Reset()         { *m = MsgWithdrawSPResponse{} }
func (m *MsgWithdrawSPResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawSPResponse) ProtoMessage()    {}
func (*MsgWithdrawSPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{3}
}
func (m *MsgWithdrawSPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawSPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawSPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawSPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawSPResponse.Merge(m, src)
}
func (m *MsgWithdrawSPResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawSPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawSPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawSPResponse proto.InternalMessageInfo

func (m *MsgWithdrawSPResponse) GetWithdrawalId() string {
	if m != nil {
		return m.WithdrawalId
	}
	return ""
}

type MsgStopSPWithdrawal struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgStopSPWithdrawal) Reset()         { *m = MsgStopSPWithdrawal{} }
func (m *MsgStopSPWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgStopSPWithdrawal) ProtoMessage()    {}
func (*MsgStopSPWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{4}
}
func (m *MsgStopSPWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopSPWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopSPWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopSPWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopSPWithdrawal.Merge(m, src)
}
func (m *MsgStopSPWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopSPWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopSPWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopSPWithdrawal proto.InternalMessageInfo

func (m *MsgStopSPWithdrawal) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStopSPWithdrawal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgStopSPWithdrawalResponse struct {
}

func (m *MsgStopSPWithdrawalResponse) Reset()         { *m = MsgStopSPWithdrawalResponse{} }
func (m *MsgStopSPWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStopSPWithdrawalResponse) ProtoMessage()    {}
func (*MsgStopSPWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{5}
}
func (m *MsgStopSPWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStopSPWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStopSPWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStopSPWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStopSPWithdrawalResponse.Merge(m, src)
}
func (m *MsgStopSPWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStopSPWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStopSPWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStopSPWithdrawalResponse proto.InternalMessageInfo

type MsgBurn struct {
	Supervisor string     `protobuf:"bytes,1,opt,name=supervisor,proto3" json:"supervisor,omitempty"`
	Amount     types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgBurn) Reset()         { *m = MsgBurn{} }
func (m *MsgBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBurn) ProtoMessage()    {}
func (*MsgBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{6}
}
func (m *MsgBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurn.Merge(m, src)
}
func (m *MsgBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurn proto.InternalMessageInfo

func (m *MsgBurn) GetSupervisor() string {
	if m != nil {
		return m.Supervisor
	}
	return ""
}

func (m *MsgBurn) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type MsgBurnResponse struct {
}

func (m *MsgBurnResponse) Reset()         { *m = MsgBurnResponse{} }
func (m *MsgBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnResponse) ProtoMessage()    {}
func (*MsgBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed31ca265053ca84, []int{7}
}
func (m *MsgBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnResponse.Merge(m, src)
}
func (m *MsgBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConvertSCR2SP)(nil), "network.scorum.v1.MsgConvertSCR2SP")
	proto.RegisterType((*MsgConvertSCR2SPResponse)(nil), "network.scorum.v1.MsgConvertSCR2SPResponse")
	proto.RegisterType((*MsgWithdrawSP)(nil), "network.scorum.v1.MsgWithdrawSP")
	proto.RegisterType((*MsgWithdrawSPResponse)(nil), "network.scorum.v1.MsgWithdrawSPResponse")
	proto.RegisterType((*MsgStopSPWithdrawal)(nil), "network.scorum.v1.MsgStopSPWithdrawal")
	proto.RegisterType((*MsgStopSPWithdrawalResponse)(nil), "network.scorum.v1.MsgStopSPWithdrawalResponse")
	proto.RegisterType((*MsgBurn)(nil), "network.scorum.v1.MsgBurn")
	proto.RegisterType((*MsgBurnResponse)(nil), "network.scorum.v1.MsgBurnResponse")
}

func init() { proto.RegisterFile("network/scorum/v1/tx.proto", fileDescriptor_ed31ca265053ca84) }

var fileDescriptor_ed31ca265053ca84 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xd3, 0x52, 0x94, 0x81, 0xd0, 0xd6, 0x14, 0x11, 0x0c, 0x35, 0x91, 0x2b, 0xa1, 0x08,
	0xc4, 0x5a, 0x09, 0x07, 0x24, 0xe0, 0x94, 0x48, 0xa0, 0x1c, 0x2c, 0x45, 0xce, 0xa1, 0x88, 0x0b,
	0x72, 0xec, 0xd5, 0x76, 0x01, 0x7b, 0x8d, 0x77, 0xed, 0x94, 0x2b, 0x67, 0x0e, 0x7c, 0x0a, 0x9f,
	0xd1, 0x63, 0x8f, 0x9c, 0x10, 0x4a, 0x0e, 0xfc, 0x01, 0x67, 0xe4, 0x78, 0xed, 0x24, 0xae, 0x23,
	0x2a, 0xf5, 0x66, 0xcf, 0x7b, 0xf3, 0xe6, 0xed, 0xcc, 0x68, 0x40, 0x0b, 0xb0, 0x98, 0xb2, 0xe8,
	0xa3, 0xc9, 0x5d, 0x16, 0xc5, 0xbe, 0x99, 0x74, 0x4d, 0x71, 0x8a, 0xc2, 0x88, 0x09, 0xa6, 0xee,
	0x4b, 0x0c, 0x65, 0x18, 0x4a, 0xba, 0xda, 0x01, 0x61, 0x84, 0x2d, 0x50, 0x33, 0xfd, 0xca, 0x88,
	0xda, 0x5d, 0x97, 0x71, 0x9f, 0x71, 0xd3, 0xe7, 0x24, 0x15, 0xf0, 0x39, 0x91, 0x80, 0x2e, 0x81,
	0x89, 0xc3, 0xb1, 0x99, 0x74, 0x27, 0x58, 0x38, 0x5d, 0xd3, 0x65, 0x34, 0xc8, 0x70, 0xe3, 0x33,
	0xec, 0x59, 0x9c, 0x0c, 0x58, 0x90, 0xe0, 0x48, 0x8c, 0x07, 0x76, 0x6f, 0x3c, 0x52, 0x0f, 0xe0,
	0x1a, 0x9b, 0x06, 0x38, 0x6a, 0x29, 0x6d, 0xa5, 0xd3, 0xb0, 0xb3, 0x1f, 0xf5, 0x25, 0xec, 0x38,
	0x3e, 0x8b, 0x03, 0xd1, 0xaa, 0xb7, 0x95, 0xce, 0x8d, 0xde, 0x21, 0xca, 0xa4, 0x51, 0x2a, 0x8d,
	0xa4, 0x34, 0x1a, 0x06, 0x62, 0x94, 0x0a, 0xf7, 0xb7, 0xcf, 0x7e, 0x3d, 0xac, 0xd9, 0x32, 0xe5,
	0x05, 0x7c, 0xfd, 0xf3, 0xe3, 0x71, 0x26, 0x64, 0x68, 0xd0, 0x2a, 0x97, 0xb4, 0x31, 0x0f, 0x59,
	0xc0, 0xb1, 0xf1, 0x4d, 0x81, 0xa6, 0xc5, 0xc9, 0x31, 0x15, 0x27, 0x5e, 0xe4, 0x4c, 0x37, 0x9a,
	0x79, 0x00, 0x8d, 0x08, 0xbb, 0x34, 0xa4, 0x58, 0xfa, 0x69, 0xd8, 0xcb, 0xc0, 0x8a, 0xd5, 0xad,
	0xab, 0x59, 0x7d, 0x05, 0x77, 0xd6, 0xdc, 0xe4, 0x3e, 0xd5, 0x23, 0x68, 0x4e, 0x65, 0xd4, 0xf9,
	0xf4, 0x9e, 0x7a, 0xd2, 0xdd, 0xcd, 0x65, 0x70, 0xe8, 0x19, 0x6f, 0xe0, 0xb6, 0xc5, 0xc9, 0x58,
	0xb0, 0x70, 0x3c, 0x3a, 0x2e, 0x80, 0x0d, 0x2f, 0xba, 0x05, 0x75, 0xea, 0xc9, 0xa7, 0xd4, 0xa9,
	0xb7, 0x66, 0xe3, 0x10, 0xee, 0x57, 0x08, 0x15, 0x4d, 0xe3, 0x70, 0xdd, 0xe2, 0xa4, 0x1f, 0x47,
	0x81, 0xaa, 0x03, 0xf0, 0x38, 0xc4, 0x51, 0x42, 0x39, 0xcb, 0x0b, 0xac, 0x44, 0xd4, 0xe7, 0xa5,
	0x21, 0xde, 0xab, 0xec, 0xcc, 0x80, 0xd1, 0xa0, 0xd4, 0x95, 0xdd, 0xd4, 0xce, 0x8a, 0x92, 0xb1,
	0x0f, 0xbb, 0xb2, 0x68, 0xee, 0xa3, 0xf7, 0xb7, 0x0e, 0x5b, 0x16, 0x27, 0xaa, 0x03, 0xcd, 0xf5,
	0x85, 0x3a, 0x42, 0x17, 0xf6, 0x18, 0x95, 0x57, 0x40, 0x7b, 0x72, 0x09, 0x52, 0xd1, 0xff, 0xb7,
	0x00, 0x2b, 0x3b, 0xd2, 0xae, 0x4e, 0x5d, 0x32, 0xb4, 0xce, 0xff, 0x18, 0x85, 0xf2, 0x07, 0xd8,
	0xbb, 0x30, 0xb1, 0x47, 0xd5, 0xd9, 0x65, 0x9e, 0x86, 0x2e, 0xc7, 0x2b, 0x6a, 0xbd, 0x86, 0xed,
	0xc5, 0xd4, 0xb4, 0xea, 0xbc, 0x14, 0xd3, 0x8c, 0xcd, 0x58, 0xae, 0xd3, 0x1f, 0x9e, 0xcd, 0x74,
	0xe5, 0x7c, 0xa6, 0x2b, 0xbf, 0x67, 0xba, 0xf2, 0x7d, 0xae, 0xd7, 0xce, 0xe7, 0x7a, 0xed, 0xe7,
	0x5c, 0xaf, 0xbd, 0x33, 0x09, 0x15, 0x27, 0xf1, 0x04, 0xb9, 0xcc, 0xcf, 0xef, 0x4b, 0x36, 0xf0,
	0xa7, 0xf9, 0xd5, 0x39, 0xcd, 0xe3, 0xe2, 0x4b, 0x88, 0xf9, 0x64, 0x67, 0x71, 0x16, 0x9e, 0xfd,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xec, 0x78, 0xcd, 0x96, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ConvertSCR2SP(ctx context.Context, in *MsgConvertSCR2SP, opts ...grpc.CallOption) (*MsgConvertSCR2SPResponse, error)
	WithdrawSP(ctx context.Context, in *MsgWithdrawSP, opts ...grpc.CallOption) (*MsgWithdrawSPResponse, error)
	StopSPWithdrawal(ctx context.Context, in *MsgStopSPWithdrawal, opts ...grpc.CallOption) (*MsgStopSPWithdrawalResponse, error)
	Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConvertSCR2SP(ctx context.Context, in *MsgConvertSCR2SP, opts ...grpc.CallOption) (*MsgConvertSCR2SPResponse, error) {
	out := new(MsgConvertSCR2SPResponse)
	err := c.cc.Invoke(ctx, "/network.scorum.v1.Msg/ConvertSCR2SP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawSP(ctx context.Context, in *MsgWithdrawSP, opts ...grpc.CallOption) (*MsgWithdrawSPResponse, error) {
	out := new(MsgWithdrawSPResponse)
	err := c.cc.Invoke(ctx, "/network.scorum.v1.Msg/WithdrawSP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StopSPWithdrawal(ctx context.Context, in *MsgStopSPWithdrawal, opts ...grpc.CallOption) (*MsgStopSPWithdrawalResponse, error) {
	out := new(MsgStopSPWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/network.scorum.v1.Msg/StopSPWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Burn(ctx context.Context, in *MsgBurn, opts ...grpc.CallOption) (*MsgBurnResponse, error) {
	out := new(MsgBurnResponse)
	err := c.cc.Invoke(ctx, "/network.scorum.v1.Msg/Burn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ConvertSCR2SP(context.Context, *MsgConvertSCR2SP) (*MsgConvertSCR2SPResponse, error)
	WithdrawSP(context.Context, *MsgWithdrawSP) (*MsgWithdrawSPResponse, error)
	StopSPWithdrawal(context.Context, *MsgStopSPWithdrawal) (*MsgStopSPWithdrawalResponse, error)
	Burn(context.Context, *MsgBurn) (*MsgBurnResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConvertSCR2SP(ctx context.Context, req *MsgConvertSCR2SP) (*MsgConvertSCR2SPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertSCR2SP not implemented")
}
func (*UnimplementedMsgServer) WithdrawSP(ctx context.Context, req *MsgWithdrawSP) (*MsgWithdrawSPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawSP not implemented")
}
func (*UnimplementedMsgServer) StopSPWithdrawal(ctx context.Context, req *MsgStopSPWithdrawal) (*MsgStopSPWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSPWithdrawal not implemented")
}
func (*UnimplementedMsgServer) Burn(ctx context.Context, req *MsgBurn) (*MsgBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Burn not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConvertSCR2SP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertSCR2SP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertSCR2SP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.scorum.v1.Msg/ConvertSCR2SP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertSCR2SP(ctx, req.(*MsgConvertSCR2SP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawSP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawSP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawSP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.scorum.v1.Msg/WithdrawSP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawSP(ctx, req.(*MsgWithdrawSP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StopSPWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStopSPWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StopSPWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.scorum.v1.Msg/StopSPWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StopSPWithdrawal(ctx, req.(*MsgStopSPWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Burn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Burn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.scorum.v1.Msg/Burn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Burn(ctx, req.(*MsgBurn))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.scorum.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertSCR2SP",
			Handler:    _Msg_ConvertSCR2SP_Handler,
		},
		{
			MethodName: "WithdrawSP",
			Handler:    _Msg_WithdrawSP_Handler,
		},
		{
			MethodName: "StopSPWithdrawal",
			Handler:    _Msg_StopSPWithdrawal_Handler,
		},
		{
			MethodName: "Burn",
			Handler:    _Msg_Burn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/scorum/v1/tx.proto",
}

func (m *MsgConvertSCR2SP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertSCR2SP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertSCR2SP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConvertSCR2SPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertSCR2SPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertSCR2SPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawSP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawSP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawSP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawSPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawSPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawSPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawalId) > 0 {
		i -= len(m.WithdrawalId)
		copy(dAtA[i:], m.WithdrawalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopSPWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopSPWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopSPWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStopSPWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStopSPWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStopSPWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Supervisor) > 0 {
		i -= len(m.Supervisor)
		copy(dAtA[i:], m.Supervisor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Supervisor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConvertSCR2SP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgConvertSCR2SPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawSP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawSPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStopSPWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStopSPWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Supervisor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConvertSCR2SP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertSCR2SP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertSCR2SP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertSCR2SPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertSCR2SPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertSCR2SPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawSP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawSP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawSP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawSPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawSPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawSPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopSPWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopSPWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopSPWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStopSPWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStopSPWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStopSPWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supervisor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supervisor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
