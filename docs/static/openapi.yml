consumes:
- application/json
definitions:
  cosmos.app.v1alpha1.Config:
    description: |-
      Config represents the configuration for a Cosmos SDK ABCI app.
      It is intended that all state machine logic including the version of
      baseapp and tx handlers (and possibly even Tendermint) that an app needs
      can be described in a config object. For compatibility, the framework should
      allow a mixture of declarative and imperative app wiring, however, apps
      that strive for the maximum ease of maintainability should be able to describe
      their state machine with a config object alone.
    properties:
      golang_bindings:
        description: |-
          golang_bindings specifies explicit interface to implementation type bindings which
          depinject uses to resolve interface inputs to provider functions.  The scope of this
          field's configuration is global (not module specific).
        items:
          $ref: '#/definitions/cosmos.app.v1alpha1.GolangBinding'
        type: array
      modules:
        description: modules are the module configurations for the app.
        items:
          $ref: '#/definitions/cosmos.app.v1alpha1.ModuleConfig'
        type: array
    type: object
  cosmos.app.v1alpha1.GolangBinding:
    description: GolangBinding is an explicit interface type to implementing type
      binding for dependency injection.
    properties:
      implementation:
        title: implementation is the implementing type which will be supplied when
          an input of type interface is requested
        type: string
      interface_type:
        title: interface_type is the interface type which will be bound to a specific
          implementation type
        type: string
    type: object
  cosmos.app.v1alpha1.ModuleConfig:
    description: ModuleConfig is a module configuration for an app.
    properties:
      config:
        $ref: '#/definitions/google.protobuf.Any'
        description: |-
          config is the config object for the module. Module config messages should
          define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
      golang_bindings:
        description: |-
          golang_bindings specifies explicit interface to implementation type bindings which
          depinject uses to resolve interface inputs to provider functions.  The scope of this
          field's configuration is module specific.
        items:
          $ref: '#/definitions/cosmos.app.v1alpha1.GolangBinding'
        type: array
      name:
        description: |-
          name is the unique name of the module within the app. It should be a name
          that persists between different versions of a module so that modules
          can be smoothly upgraded to new versions.

          For example, for the module cosmos.bank.module.v1.Module, we may chose
          to simply name the module "bank" in the app. When we upgrade to
          cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
          and the framework knows that the v2 module should receive all the same state
          that the v1 module had. Note: modules should provide info on which versions
          they can migrate from in the ModuleDescriptor.can_migration_from field.
        type: string
    type: object
  cosmos.app.v1alpha1.QueryConfigResponse:
    description: QueryConfigRequest is the Query/Config response type.
    properties:
      config:
        $ref: '#/definitions/cosmos.app.v1alpha1.Config'
        description: config is the current app config.
    type: object
  cosmos.auth.v1beta1.AddressBytesToStringResponse:
    description: |-
      AddressBytesToStringResponse is the response type for AddressString rpc method.

      Since: cosmos-sdk 0.46
    properties:
      address_string:
        type: string
    type: object
  cosmos.auth.v1beta1.AddressStringToBytesResponse:
    description: |-
      AddressStringToBytesResponse is the response type for AddressBytes rpc method.

      Since: cosmos-sdk 0.46
    properties:
      address_bytes:
        format: byte
        type: string
    type: object
  cosmos.auth.v1beta1.BaseAccount:
    description: |-
      BaseAccount defines a base account type. It contains all the necessary fields
      for basic account functionality. Any custom account type should extend this
      type for additional functionality (e.g. vesting).
    properties:
      account_number:
        format: uint64
        type: string
      address:
        type: string
      pub_key:
        $ref: '#/definitions/google.protobuf.Any'
      sequence:
        format: uint64
        type: string
    type: object
  cosmos.auth.v1beta1.Bech32PrefixResponse:
    description: |-
      Bech32PrefixResponse is the response type for Bech32Prefix rpc method.

      Since: cosmos-sdk 0.46
    properties:
      bech32_prefix:
        type: string
    type: object
  cosmos.auth.v1beta1.Params:
    description: Params defines the parameters for the auth module.
    properties:
      max_memo_characters:
        format: uint64
        type: string
      sig_verify_cost_ed25519:
        format: uint64
        type: string
      sig_verify_cost_secp256k1:
        format: uint64
        type: string
      tx_sig_limit:
        format: uint64
        type: string
      tx_size_cost_per_byte:
        format: uint64
        type: string
    type: object
  cosmos.auth.v1beta1.QueryAccountAddressByIDResponse:
    description: 'Since: cosmos-sdk 0.46.2'
    properties:
      account_address:
        type: string
    title: QueryAccountAddressByIDResponse is the response type for AccountAddressByID
      rpc method
    type: object
  cosmos.auth.v1beta1.QueryAccountInfoResponse:
    description: |-
      QueryAccountInfoResponse is the Query/AccountInfo response type.

      Since: cosmos-sdk 0.47
    properties:
      info:
        $ref: '#/definitions/cosmos.auth.v1beta1.BaseAccount'
        description: info is the account info which is represented by BaseAccount.
    type: object
  cosmos.auth.v1beta1.QueryAccountResponse:
    description: QueryAccountResponse is the response type for the Query/Account RPC
      method.
    properties:
      account:
        $ref: '#/definitions/google.protobuf.Any'
        description: account defines the account of the corresponding address.
    type: object
  cosmos.auth.v1beta1.QueryAccountsResponse:
    description: |-
      QueryAccountsResponse is the response type for the Query/Accounts RPC method.

      Since: cosmos-sdk 0.43
    properties:
      accounts:
        items:
          $ref: '#/definitions/google.protobuf.Any'
        title: accounts are the existing accounts
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.auth.v1beta1.QueryModuleAccountByNameResponse:
    description: QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName
      RPC method.
    properties:
      account:
        $ref: '#/definitions/google.protobuf.Any'
    type: object
  cosmos.auth.v1beta1.QueryModuleAccountsResponse:
    description: |-
      QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.

      Since: cosmos-sdk 0.46
    properties:
      accounts:
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
    type: object
  cosmos.auth.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC
      method.
    properties:
      params:
        $ref: '#/definitions/cosmos.auth.v1beta1.Params'
        description: params defines the parameters of the module.
    type: object
  cosmos.authz.v1beta1.Grant:
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
    properties:
      authorization:
        $ref: '#/definitions/google.protobuf.Any'
      expiration:
        format: date-time
        title: |-
          time when the grant will expire and will be pruned. If null, then the grant
          doesn't have a time expiration (other conditions  in `authorization`
          may apply to invalidate the grant)
        type: string
    type: object
  cosmos.authz.v1beta1.GrantAuthorization:
    properties:
      authorization:
        $ref: '#/definitions/google.protobuf.Any'
      expiration:
        format: date-time
        type: string
      grantee:
        type: string
      granter:
        type: string
    title: |-
      GrantAuthorization extends a grant with both the addresses of the grantee and granter.
      It is used in genesis.proto and query.proto
    type: object
  cosmos.authz.v1beta1.QueryGranteeGrantsResponse:
    description: QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants
      RPC method.
    properties:
      grants:
        description: grants is a list of grants granted to the grantee.
        items:
          $ref: '#/definitions/cosmos.authz.v1beta1.GrantAuthorization'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
    type: object
  cosmos.authz.v1beta1.QueryGranterGrantsResponse:
    description: QueryGranterGrantsResponse is the response type for the Query/GranterGrants
      RPC method.
    properties:
      grants:
        description: grants is a list of grants granted by the granter.
        items:
          $ref: '#/definitions/cosmos.authz.v1beta1.GrantAuthorization'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
    type: object
  cosmos.authz.v1beta1.QueryGrantsResponse:
    description: QueryGrantsResponse is the response type for the Query/Authorizations
      RPC method.
    properties:
      grants:
        description: authorizations is a list of grants granted for grantee by granter.
        items:
          $ref: '#/definitions/cosmos.authz.v1beta1.Grant'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
    type: object
  cosmos.autocli.v1.AppOptionsResponse:
    description: AppOptionsResponse is the RemoteInfoService/AppOptions response type.
    properties:
      module_options:
        additionalProperties:
          $ref: '#/definitions/cosmos.autocli.v1.ModuleOptions'
        description: module_options is a map of module name to autocli module options.
        type: object
    type: object
  cosmos.autocli.v1.FlagOptions:
    description: |-
      FlagOptions are options for flags generated from rpc request fields.
      By default, all request fields are configured as flags based on the
      kebab-case name of the field. Fields can be turned into positional arguments
      instead by using RpcCommandOptions.positional_args.
    properties:
      default_value:
        description: default_value is the default value as text.
        type: string
      deprecated:
        description: deprecated is the usage text to show if this flag is deprecated.
        type: string
      hidden:
        title: hidden hides the flag from help/usage text
        type: boolean
      name:
        description: name is an alternate name to use for the field flag.
        type: string
      no_opt_default_value:
        description: default value is the default value as text if the flag is used
          without any value.
        type: string
      shorthand:
        description: shorthand is a one-letter abbreviated flag.
        type: string
      shorthand_deprecated:
        description: shorthand_deprecated is the usage text to show if the shorthand
          of this flag is deprecated.
        type: string
      usage:
        description: usage is the help message.
        type: string
    type: object
  cosmos.autocli.v1.ModuleOptions:
    description: ModuleOptions describes the CLI options for a Cosmos SDK module.
    properties:
      query:
        $ref: '#/definitions/cosmos.autocli.v1.ServiceCommandDescriptor'
        description: query describes the tx command for the module.
      tx:
        $ref: '#/definitions/cosmos.autocli.v1.ServiceCommandDescriptor'
        description: tx describes the tx command for the module.
    type: object
  cosmos.autocli.v1.PositionalArgDescriptor:
    description: PositionalArgDescriptor describes a positional argument.
    properties:
      proto_field:
        description: |-
          proto_field specifies the proto field to use as the positional arg. Any
          fields used as positional args will not have a flag generated.
        type: string
      varargs:
        description: |-
          varargs makes a positional parameter a varargs parameter. This can only be
          applied to last positional parameter and the proto_field must a repeated
          field.
        type: boolean
    type: object
  cosmos.autocli.v1.RpcCommandOptions:
    description: |-
      RpcCommandOptions specifies options for commands generated from protobuf
      rpc methods.
    properties:
      alias:
        description: alias is an array of aliases that can be used instead of the
          first word in Use.
        items:
          type: string
        type: array
      deprecated:
        description: deprecated defines, if this command is deprecated and should
          print this string when used.
        type: string
      example:
        description: example is examples of how to use the command.
        type: string
      flag_options:
        additionalProperties:
          $ref: '#/definitions/cosmos.autocli.v1.FlagOptions'
        description: |-
          flag_options are options for flags generated from rpc request fields.
          By default all request fields are configured as flags. They can
          also be configured as positional args instead using positional_args.
        type: object
      long:
        description: long is the long message shown in the 'help <this-command>' output.
        type: string
      positional_args:
        description: positional_args specifies positional arguments for the command.
        items:
          $ref: '#/definitions/cosmos.autocli.v1.PositionalArgDescriptor'
        type: array
      rpc_method:
        description: |-
          rpc_method is short name of the protobuf rpc method that this command is
          generated from.
        type: string
      short:
        description: short is the short description shown in the 'help' output.
        type: string
      skip:
        description: skip specifies whether to skip this rpc method when generating
          commands.
        type: boolean
      suggest_for:
        description: |-
          suggest_for is an array of command names for which this command will be suggested -
          similar to aliases but only suggests.
        items:
          type: string
        type: array
      use:
        description: |-
          use is the one-line usage method. It also allows specifying an alternate
          name for the command as the first word of the usage text.

          By default the name of an rpc command is the kebab-case short name of the
          rpc method.
        type: string
      version:
        description: |-
          version defines the version for this command. If this value is non-empty and the command does not
          define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
          will print content of the "Version" variable. A shorthand "v" flag will also be added if the
          command does not define one.
        type: string
    type: object
  cosmos.autocli.v1.ServiceCommandDescriptor:
    description: ServiceCommandDescriptor describes a CLI command based on a protobuf
      service.
    properties:
      rpc_command_options:
        description: |-
          rpc_command_options are options for commands generated from rpc methods.
          If no options are specified for a given rpc method on the service, a
          command will be generated for that method with the default options.
        items:
          $ref: '#/definitions/cosmos.autocli.v1.RpcCommandOptions'
        type: array
      service:
        description: |-
          service is the fully qualified name of the protobuf service to build
          the command from. It can be left empty if sub_commands are used instead
          which may be the case if a module provides multiple tx and/or query services.
        type: string
      sub_commands:
        additionalProperties:
          $ref: '#/definitions/cosmos.autocli.v1.ServiceCommandDescriptor'
        description: |-
          sub_commands is a map of optional sub-commands for this command based on
          different protobuf services. The map key is used as the name of the
          sub-command.
        type: object
    type: object
  cosmos.bank.v1beta1.DenomOwner:
    description: |-
      DenomOwner defines structure representing an account that owns or holds a
      particular denominated token. It contains the account address and account
      balance of the denominated token.

      Since: cosmos-sdk 0.46
    properties:
      address:
        description: address defines the address that owns a particular denomination.
        type: string
      balance:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        description: balance is the balance of the denominated coin for an account.
    type: object
  cosmos.bank.v1beta1.DenomUnit:
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
    properties:
      aliases:
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
        type: array
      denom:
        description: denom represents the string name of the given denom unit (e.g
          uatom).
        type: string
      exponent:
        description: |-
          exponent represents power of 10 exponent that one must
          raise the base_denom to in order to equal the given DenomUnit's denom
          1 denom = 10^exponent base_denom
          (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
          exponent = 6, thus: 1 atom = 10^6 uatom).
        format: int64
        type: integer
    type: object
  cosmos.bank.v1beta1.Metadata:
    description: |-
      Metadata represents a struct that describes
      a basic token.
    properties:
      base:
        description: base represents the base denom (should be the DenomUnit with
          exponent = 0).
        type: string
      denom_units:
        items:
          $ref: '#/definitions/cosmos.bank.v1beta1.DenomUnit'
        title: denom_units represents the list of DenomUnit's for a given coin
        type: array
      description:
        type: string
      display:
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
        type: string
      name:
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
        type: string
      symbol:
        description: |-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
          be the same as the display.

          Since: cosmos-sdk 0.43
        type: string
      uri:
        description: |-
          URI to a document (on or off-chain) that contains additional information. Optional.

          Since: cosmos-sdk 0.46
        type: string
      uri_hash:
        description: |-
          URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
          the document didn't change. Optional.

          Since: cosmos-sdk 0.46
        type: string
    type: object
  cosmos.bank.v1beta1.Params:
    description: Params defines the parameters for the bank module.
    properties:
      default_send_enabled:
        type: boolean
      send_enabled:
        description: |-
          Deprecated: Use of SendEnabled in params is deprecated.
          For genesis, use the newly added send_enabled field in the genesis object.
          Storage, lookup, and manipulation of this information is now in the keeper.

          As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
        items:
          $ref: '#/definitions/cosmos.bank.v1beta1.SendEnabled'
        type: array
    type: object
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    description: |-
      QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
      method.
    properties:
      balances:
        description: balances is the balances of all the coins.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.bank.v1beta1.QueryBalanceResponse:
    description: QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
    properties:
      balance:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        description: balance is the balance of the coin.
    type: object
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    description: |-
      QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
      method.
    properties:
      metadata:
        $ref: '#/definitions/cosmos.bank.v1beta1.Metadata'
        description: metadata describes and provides all the client information for
          the requested token.
    type: object
  cosmos.bank.v1beta1.QueryDenomOwnersResponse:
    description: |-
      QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.

      Since: cosmos-sdk 0.46
    properties:
      denom_owners:
        items:
          $ref: '#/definitions/cosmos.bank.v1beta1.DenomOwner'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    description: |-
      QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
      method.
    properties:
      metadatas:
        description: metadata provides the client information for all the registered
          tokens.
        items:
          $ref: '#/definitions/cosmos.bank.v1beta1.Metadata'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.bank.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse defines the response type for querying x/bank
      parameters.
    properties:
      params:
        $ref: '#/definitions/cosmos.bank.v1beta1.Params'
    type: object
  cosmos.bank.v1beta1.QuerySendEnabledResponse:
    description: |-
      QuerySendEnabledResponse defines the RPC response of a SendEnable query.

      Since: cosmos-sdk 0.47
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: |-
          pagination defines the pagination in the response. This field is only
          populated if the denoms field in the request is empty.
      send_enabled:
        items:
          $ref: '#/definitions/cosmos.bank.v1beta1.SendEnabled'
        type: array
    type: object
  cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse:
    description: |-
      QuerySpendableBalanceByDenomResponse defines the gRPC response structure for
      querying an account's spendable balance for a specific denom.

      Since: cosmos-sdk 0.47
    properties:
      balance:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        description: balance is the balance of the coin.
    type: object
  cosmos.bank.v1beta1.QuerySpendableBalancesResponse:
    description: |-
      QuerySpendableBalancesResponse defines the gRPC response structure for querying
      an account's spendable balances.

      Since: cosmos-sdk 0.46
    properties:
      balances:
        description: balances is the spendable balances of all the coins.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    description: QuerySupplyOfResponse is the response type for the Query/SupplyOf
      RPC method.
    properties:
      amount:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        description: amount is the supply of the coin.
    type: object
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: |-
          pagination defines the pagination in the response.

          Since: cosmos-sdk 0.43
      supply:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        title: supply is the supply of the coins
        type: array
    title: |-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
      method
    type: object
  cosmos.bank.v1beta1.SendEnabled:
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    type: object
  cosmos.base.abci.v1beta1.ABCIMessageLog:
    description: ABCIMessageLog defines a structure containing an indexed tx ABCI
      message log.
    properties:
      events:
        description: |-
          Events contains a slice of Event objects that were emitted during some
          execution.
        items:
          $ref: '#/definitions/cosmos.base.abci.v1beta1.StringEvent'
        type: array
      log:
        type: string
      msg_index:
        format: int64
        type: integer
    type: object
  cosmos.base.abci.v1beta1.Attribute:
    description: |-
      Attribute defines an attribute wrapper where the key and value are
      strings instead of raw bytes.
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  cosmos.base.abci.v1beta1.GasInfo:
    description: GasInfo defines tx execution gas context.
    properties:
      gas_used:
        description: GasUsed is the amount of gas actually consumed.
        format: uint64
        type: string
      gas_wanted:
        description: GasWanted is the maximum units of work we allow this tx to perform.
        format: uint64
        type: string
    type: object
  cosmos.base.abci.v1beta1.Result:
    description: Result is the union of ResponseFormat and ResponseCheckTx.
    properties:
      data:
        description: |-
          Data is any data returned from message or handler execution. It MUST be
          length prefixed in order to separate data from multiple message executions.
          Deprecated. This field is still populated, but prefer msg_response instead
          because it also contains the Msg response typeURL.
        format: byte
        type: string
      events:
        description: |-
          Events contains a slice of Event objects that were emitted during message
          or handler execution.
        items:
          $ref: '#/definitions/tendermint.abci.Event'
        type: array
      log:
        description: Log contains the log information from message or handler execution.
        type: string
      msg_responses:
        description: |-
          msg_responses contains the Msg handler responses type packed in Anys.

          Since: cosmos-sdk 0.46
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
    type: object
  cosmos.base.abci.v1beta1.StringEvent:
    description: |-
      StringEvent defines en Event object wrapper where all the attributes
      contain key/value pairs that are strings instead of raw bytes.
    properties:
      attributes:
        items:
          $ref: '#/definitions/cosmos.base.abci.v1beta1.Attribute'
        type: array
      type:
        type: string
    type: object
  cosmos.base.abci.v1beta1.TxResponse:
    description: |-
      TxResponse defines a structure containing relevant tx data and metadata. The
      tags are stringified and the log is JSON decoded.
    properties:
      code:
        description: Response code.
        format: int64
        type: integer
      codespace:
        title: Namespace for the Code
        type: string
      data:
        description: Result bytes, if any.
        type: string
      events:
        description: |-
          Events defines all the events emitted by processing a transaction. Note,
          these events include those emitted by processing all the messages and those
          emitted from the ante. Whereas Logs contains the events, with
          additional metadata, emitted only by processing the messages.

          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
        items:
          $ref: '#/definitions/tendermint.abci.Event'
        type: array
      gas_used:
        description: Amount of gas consumed by transaction.
        format: int64
        type: string
      gas_wanted:
        description: Amount of gas requested for transaction.
        format: int64
        type: string
      height:
        format: int64
        title: The block height
        type: string
      info:
        description: Additional information. May be non-deterministic.
        type: string
      logs:
        description: The output of the application's logger (typed). May be non-deterministic.
        items:
          $ref: '#/definitions/cosmos.base.abci.v1beta1.ABCIMessageLog'
        type: array
      raw_log:
        description: |-
          The output of the application's logger (raw string). May be
          non-deterministic.
        type: string
      timestamp:
        description: |-
          Time of the previous block. For heights > 1, it's the weighted median of
          the timestamps of the valid votes in the block.LastCommit. For height == 1,
          it's genesis time.
        type: string
      tx:
        $ref: '#/definitions/google.protobuf.Any'
        description: The request transaction bytes.
      txhash:
        description: The transaction hash.
        type: string
    type: object
  cosmos.base.node.v1beta1.ConfigResponse:
    description: ConfigResponse defines the response structure for the Config gRPC
      query.
    properties:
      minimum_gas_price:
        type: string
    type: object
  cosmos.base.query.v1beta1.PageRequest:
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    properties:
      count_total:
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        type: boolean
      key:
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        format: byte
        type: string
      limit:
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        format: uint64
        type: string
      offset:
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        format: uint64
        type: string
      reverse:
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        type: boolean
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
    type: object
  cosmos.base.query.v1beta1.PageResponse:
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
    properties:
      next_key:
        description: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently. It will be empty if
          there are no more results.
        format: byte
        type: string
      total:
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.ABCIQueryResponse:
    description: |-
      ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.

      Note: This type is a duplicate of the ResponseQuery proto type defined in
      Tendermint.
    properties:
      code:
        format: int64
        type: integer
      codespace:
        type: string
      height:
        format: int64
        type: string
      index:
        format: int64
        type: string
      info:
        type: string
      key:
        format: byte
        type: string
      log:
        type: string
      proof_ops:
        $ref: '#/definitions/cosmos.base.tendermint.v1beta1.ProofOps'
      value:
        format: byte
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.Block:
    description: |-
      Block is tendermint type Block, with the Header proposer address
      field converted to bech32 string.
    properties:
      data:
        $ref: '#/definitions/tendermint.types.Data'
      evidence:
        $ref: '#/definitions/tendermint.types.EvidenceList'
      header:
        $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Header'
      last_commit:
        $ref: '#/definitions/tendermint.types.Commit'
    type: object
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    description: GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight
      RPC method.
    properties:
      block:
        $ref: '#/definitions/tendermint.types.Block'
        title: 'Deprecated: please use `sdk_block` instead'
      block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
      sdk_block:
        $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Block'
        title: 'Since: cosmos-sdk 0.47'
    type: object
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    description: GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC method.
    properties:
      block:
        $ref: '#/definitions/tendermint.types.Block'
        title: 'Deprecated: please use `sdk_block` instead'
      block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
      sdk_block:
        $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Block'
        title: 'Since: cosmos-sdk 0.47'
    type: object
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    description: GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight
      RPC method.
    properties:
      block_height:
        format: int64
        type: string
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
      validators:
        items:
          $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Validator'
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    description: GetNodeInfoResponse is the response type for the Query/GetNodeInfo
      RPC method.
    properties:
      application_version:
        $ref: '#/definitions/cosmos.base.tendermint.v1beta1.VersionInfo'
      default_node_info:
        $ref: '#/definitions/tendermint.p2p.DefaultNodeInfo'
    type: object
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    description: GetSyncingResponse is the response type for the Query/GetSyncing
      RPC method.
    properties:
      syncing:
        type: boolean
    type: object
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    description: GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight
      RPC method.
    properties:
      block_height:
        format: int64
        type: string
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
      validators:
        items:
          $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Validator'
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.Header:
    description: Header defines the structure of a Tendermint block header.
    properties:
      app_hash:
        format: byte
        type: string
      chain_id:
        type: string
      consensus_hash:
        format: byte
        type: string
      data_hash:
        format: byte
        type: string
      evidence_hash:
        format: byte
        title: consensus info
        type: string
      height:
        format: int64
        type: string
      last_block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
        title: prev block info
      last_commit_hash:
        format: byte
        title: hashes of block data
        type: string
      last_results_hash:
        format: byte
        type: string
      next_validators_hash:
        format: byte
        type: string
      proposer_address:
        description: |-
          proposer_address is the original block proposer address, formatted as a Bech32 string.
          In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string
          for better UX.
        type: string
      time:
        format: date-time
        type: string
      validators_hash:
        format: byte
        title: hashes from the app output from the prev block
        type: string
      version:
        $ref: '#/definitions/tendermint.version.Consensus'
        title: basic block info
    type: object
  cosmos.base.tendermint.v1beta1.Module:
    properties:
      path:
        title: module path
        type: string
      sum:
        title: checksum
        type: string
      version:
        title: module version
        type: string
    title: Module is the type for VersionInfo
    type: object
  cosmos.base.tendermint.v1beta1.ProofOp:
    description: |-
      ProofOp defines an operation used for calculating Merkle root. The data could
      be arbitrary format, providing necessary data for example neighbouring node
      hash.

      Note: This type is a duplicate of the ProofOp proto type defined in Tendermint.
    properties:
      data:
        format: byte
        type: string
      key:
        format: byte
        type: string
      type:
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.ProofOps:
    description: |-
      ProofOps is Merkle proof defined by the list of ProofOps.

      Note: This type is a duplicate of the ProofOps proto type defined in Tendermint.
    properties:
      ops:
        items:
          $ref: '#/definitions/cosmos.base.tendermint.v1beta1.ProofOp'
        type: array
    type: object
  cosmos.base.tendermint.v1beta1.Validator:
    description: Validator is the type for the validator-set.
    properties:
      address:
        type: string
      proposer_priority:
        format: int64
        type: string
      pub_key:
        $ref: '#/definitions/google.protobuf.Any'
      voting_power:
        format: int64
        type: string
    type: object
  cosmos.base.tendermint.v1beta1.VersionInfo:
    description: VersionInfo is the type for the GetNodeInfoResponse message.
    properties:
      app_name:
        type: string
      build_deps:
        items:
          $ref: '#/definitions/cosmos.base.tendermint.v1beta1.Module'
        type: array
      build_tags:
        type: string
      cosmos_sdk_version:
        title: 'Since: cosmos-sdk 0.43'
        type: string
      git_commit:
        type: string
      go_version:
        type: string
      name:
        type: string
      version:
        type: string
    type: object
  cosmos.base.v1beta1.Coin:
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
    properties:
      amount:
        type: string
      denom:
        type: string
    type: object
  cosmos.base.v1beta1.DecCoin:
    description: |-
      DecCoin defines a token with a denomination and a decimal amount.

      NOTE: The amount field is an Dec which implements the custom method
      signatures required by gogoproto.
    properties:
      amount:
        type: string
      denom:
        type: string
    type: object
  cosmos.base.v1beta1.DecProto:
    description: DecProto defines a Protobuf wrapper around a Dec object.
    properties:
      dec:
        type: string
    type: object
  cosmos.base.v1beta1.IntProto:
    description: IntProto defines a Protobuf wrapper around an Int object.
    properties:
      int:
        type: string
    type: object
  cosmos.consensus.v1.QueryParamsResponse:
    description: QueryParamsResponse defines the response type for querying x/consensus
      parameters.
    properties:
      params:
        $ref: '#/definitions/tendermint.types.ConsensusParams'
        description: |-
          params are the tendermint consensus params stored in the consensus module.
          Please note that `params.version` is not populated in this response, it is
          tracked separately in the x/upgrade module.
    type: object
  cosmos.crypto.multisig.v1beta1.CompactBitArray:
    description: |-
      CompactBitArray is an implementation of a space efficient bit array.
      This is used to ensure that the encoded data takes up a minimal amount of
      space after proto encoding.
      This is not thread safe, and is not intended for concurrent usage.
    properties:
      elems:
        format: byte
        type: string
      extra_bits_stored:
        format: int64
        type: integer
    type: object
  cosmos.distribution.v1beta1.DelegationDelegatorReward:
    description: |-
      DelegationDelegatorReward represents the properties
      of a delegator's delegation reward.
    properties:
      reward:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
      validator_address:
        type: string
    type: object
  cosmos.distribution.v1beta1.Params:
    description: Params defines the set of params for the distribution module.
    properties:
      base_proposer_reward:
        description: |-
          Deprecated: The base_proposer_reward field is deprecated and is no longer used
          in the x/distribution module's reward mechanism.
        type: string
      bonus_proposer_reward:
        description: |-
          Deprecated: The bonus_proposer_reward field is deprecated and is no longer used
          in the x/distribution module's reward mechanism.
        type: string
      community_tax:
        type: string
      withdraw_addr_enabled:
        type: boolean
    type: object
  cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
    description: |-
      QueryCommunityPoolResponse is the response type for the Query/CommunityPool
      RPC method.
    properties:
      pool:
        description: pool defines community pool's coins.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
    description: |-
      QueryDelegationRewardsResponse is the response type for the
      Query/DelegationRewards RPC method.
    properties:
      rewards:
        description: rewards defines the rewards accrued by a delegation.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
    description: |-
      QueryDelegationTotalRewardsResponse is the response type for the
      Query/DelegationTotalRewards RPC method.
    properties:
      rewards:
        description: rewards defines all the rewards accrued by a delegator.
        items:
          $ref: '#/definitions/cosmos.distribution.v1beta1.DelegationDelegatorReward'
        type: array
      total:
        description: total defines the sum of all the rewards.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
    description: |-
      QueryDelegatorValidatorsResponse is the response type for the
      Query/DelegatorValidators RPC method.
    properties:
      validators:
        description: validators defines the validators a delegator is delegating for.
        items:
          type: string
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
    description: |-
      QueryDelegatorWithdrawAddressResponse is the response type for the
      Query/DelegatorWithdrawAddress RPC method.
    properties:
      withdraw_address:
        description: withdraw_address defines the delegator address to query for.
        type: string
    type: object
  cosmos.distribution.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC
      method.
    properties:
      params:
        $ref: '#/definitions/cosmos.distribution.v1beta1.Params'
        description: params defines the parameters of the module.
    type: object
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
    properties:
      commission:
        $ref: '#/definitions/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission'
        description: commission defines the commission the validator received.
    title: |-
      QueryValidatorCommissionResponse is the response type for the
      Query/ValidatorCommission RPC method
    type: object
  cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse:
    description: QueryValidatorDistributionInfoResponse is the response type for the
      Query/ValidatorDistributionInfo RPC method.
    properties:
      commission:
        description: commission defines the commission the validator received.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
      operator_address:
        description: operator_address defines the validator operator address.
        type: string
      self_bond_rewards:
        description: self_bond_rewards defines the self delegations rewards.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
    description: |-
      QueryValidatorOutstandingRewardsResponse is the response type for the
      Query/ValidatorOutstandingRewards RPC method.
    properties:
      rewards:
        $ref: '#/definitions/cosmos.distribution.v1beta1.ValidatorOutstandingRewards'
    type: object
  cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
    description: |-
      QueryValidatorSlashesResponse is the response type for the
      Query/ValidatorSlashes RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      slashes:
        description: slashes defines the slashes the validator received.
        items:
          $ref: '#/definitions/cosmos.distribution.v1beta1.ValidatorSlashEvent'
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
    description: |-
      ValidatorAccumulatedCommission represents accumulated commission
      for a validator kept as a running counter, can be withdrawn at any time.
    properties:
      commission:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
    description: |-
      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
      for a validator inexpensive to track, allows simple sanity checks.
    properties:
      rewards:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.DecCoin'
        type: array
    type: object
  cosmos.distribution.v1beta1.ValidatorSlashEvent:
    description: |-
      ValidatorSlashEvent represents a validator slash event.
      Height is implicit within the store key.
      This is needed to calculate appropriate amount of staking tokens
      for delegations which are withdrawn after a slash has occurred.
    properties:
      fraction:
        type: string
      validator_period:
        format: uint64
        type: string
    type: object
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    description: |-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
      method.
    properties:
      evidence:
        description: evidence returns all evidences.
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    description: QueryEvidenceResponse is the response type for the Query/Evidence
      RPC method.
    properties:
      evidence:
        $ref: '#/definitions/google.protobuf.Any'
        description: evidence returns the requested evidence.
    type: object
  cosmos.feegrant.v1beta1.Grant:
    properties:
      allowance:
        $ref: '#/definitions/google.protobuf.Any'
        description: allowance can be any of basic, periodic, allowed fee allowance.
      grantee:
        description: grantee is the address of the user being granted an allowance
          of another user's funds.
        type: string
      granter:
        description: granter is the address of the user granting an allowance of their
          funds.
        type: string
    title: Grant is stored in the KVStore to record a grant with full context
    type: object
  cosmos.feegrant.v1beta1.QueryAllowanceResponse:
    description: QueryAllowanceResponse is the response type for the Query/Allowance
      RPC method.
    properties:
      allowance:
        $ref: '#/definitions/cosmos.feegrant.v1beta1.Grant'
        description: allowance is a allowance granted for grantee by granter.
    type: object
  cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse:
    description: |-
      QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.

      Since: cosmos-sdk 0.46
    properties:
      allowances:
        description: allowances that have been issued by the granter.
        items:
          $ref: '#/definitions/cosmos.feegrant.v1beta1.Grant'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
    type: object
  cosmos.feegrant.v1beta1.QueryAllowancesResponse:
    description: QueryAllowancesResponse is the response type for the Query/Allowances
      RPC method.
    properties:
      allowances:
        description: allowances are allowance's granted for grantee by granter.
        items:
          $ref: '#/definitions/cosmos.feegrant.v1beta1.Grant'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines an pagination for the response.
    type: object
  cosmos.gov.v1.Deposit:
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
    properties:
      amount:
        description: amount to be deposited by depositor.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      depositor:
        description: depositor defines the deposit addresses from the proposals.
        type: string
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
    type: object
  cosmos.gov.v1.DepositParams:
    description: DepositParams defines the params for deposits on governance proposals.
    properties:
      max_deposit_period:
        description: |-
          Maximum period for Atom holders to deposit on a proposal. Initial value: 2
          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
    type: object
  cosmos.gov.v1.Params:
    description: |-
      Params defines the parameters for the x/gov module.

      Since: cosmos-sdk 0.47
    properties:
      burn_proposal_deposit_prevote:
        title: burn deposits if the proposal does not enter voting period
        type: boolean
      burn_vote_quorum:
        title: burn deposits if a proposal does not meet quorum
        type: boolean
      burn_vote_veto:
        title: burn deposits if quorum with vote type no_veto is met
        type: boolean
      max_deposit_period:
        description: |-
          Maximum period for Atom holders to deposit on a proposal. Initial value: 2
          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      min_initial_deposit_ratio:
        description: The ratio representing the proportion of the deposit value that
          must be paid at proposal submission.
        type: string
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
        type: string
      threshold:
        description: 'Minimum proportion of Yes votes for proposal to pass. Default
          value: 0.5.'
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
        type: string
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1.Proposal:
    description: Proposal defines the core field members of a governance proposal.
    properties:
      deposit_end_time:
        description: deposit_end_time is the end time for deposition.
        format: date-time
        type: string
      final_tally_result:
        $ref: '#/definitions/cosmos.gov.v1.TallyResult'
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
      id:
        description: id defines the unique id of the proposal.
        format: uint64
        type: string
      messages:
        description: messages are the arbitrary messages to be executed if the proposal
          passes.
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
      metadata:
        description: metadata is any arbitrary metadata attached to the proposal.
        type: string
      proposer:
        description: 'Since: cosmos-sdk 0.47'
        title: Proposer is the address of the proposal sumbitter
        type: string
      status:
        $ref: '#/definitions/cosmos.gov.v1.ProposalStatus'
        description: status defines the proposal status.
      submit_time:
        description: submit_time is the time of proposal submission.
        format: date-time
        type: string
      summary:
        description: 'Since: cosmos-sdk 0.47'
        title: summary is a short summary of the proposal
        type: string
      title:
        description: 'Since: cosmos-sdk 0.47'
        title: title is the title of the proposal
        type: string
      total_deposit:
        description: total_deposit is the total deposit on the proposal.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      voting_end_time:
        description: voting_end_time is the end time of voting on a proposal.
        format: date-time
        type: string
      voting_start_time:
        description: voting_start_time is the starting time to vote on a proposal.
        format: date-time
        type: string
    type: object
  cosmos.gov.v1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
    enum:
    - PROPOSAL_STATUS_UNSPECIFIED
    - PROPOSAL_STATUS_DEPOSIT_PERIOD
    - PROPOSAL_STATUS_VOTING_PERIOD
    - PROPOSAL_STATUS_PASSED
    - PROPOSAL_STATUS_REJECTED
    - PROPOSAL_STATUS_FAILED
    type: string
  cosmos.gov.v1.QueryDepositResponse:
    description: QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
    properties:
      deposit:
        $ref: '#/definitions/cosmos.gov.v1.Deposit'
        description: deposit defines the requested deposit.
    type: object
  cosmos.gov.v1.QueryDepositsResponse:
    description: QueryDepositsResponse is the response type for the Query/Deposits
      RPC method.
    properties:
      deposits:
        description: deposits defines the requested deposits.
        items:
          $ref: '#/definitions/cosmos.gov.v1.Deposit'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.gov.v1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC
      method.
    properties:
      deposit_params:
        $ref: '#/definitions/cosmos.gov.v1.DepositParams'
        description: |-
          Deprecated: Prefer to use `params` instead.
          deposit_params defines the parameters related to deposit.
      params:
        $ref: '#/definitions/cosmos.gov.v1.Params'
        description: |-
          params defines all the paramaters of x/gov module.

          Since: cosmos-sdk 0.47
      tally_params:
        $ref: '#/definitions/cosmos.gov.v1.TallyParams'
        description: |-
          Deprecated: Prefer to use `params` instead.
          tally_params defines the parameters related to tally.
      voting_params:
        $ref: '#/definitions/cosmos.gov.v1.VotingParams'
        description: |-
          Deprecated: Prefer to use `params` instead.
          voting_params defines the parameters related to voting.
    type: object
  cosmos.gov.v1.QueryProposalResponse:
    description: QueryProposalResponse is the response type for the Query/Proposal
      RPC method.
    properties:
      proposal:
        $ref: '#/definitions/cosmos.gov.v1.Proposal'
        description: proposal is the requested governance proposal.
    type: object
  cosmos.gov.v1.QueryProposalsResponse:
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      proposals:
        description: proposals defines all the requested governance proposals.
        items:
          $ref: '#/definitions/cosmos.gov.v1.Proposal'
        type: array
    type: object
  cosmos.gov.v1.QueryTallyResultResponse:
    description: QueryTallyResultResponse is the response type for the Query/Tally
      RPC method.
    properties:
      tally:
        $ref: '#/definitions/cosmos.gov.v1.TallyResult'
        description: tally defines the requested tally.
    type: object
  cosmos.gov.v1.QueryVoteResponse:
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    properties:
      vote:
        $ref: '#/definitions/cosmos.gov.v1.Vote'
        description: vote defines the queried vote.
    type: object
  cosmos.gov.v1.QueryVotesResponse:
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      votes:
        description: votes defines the queried votes.
        items:
          $ref: '#/definitions/cosmos.gov.v1.Vote'
        type: array
    type: object
  cosmos.gov.v1.TallyParams:
    description: TallyParams defines the params for tallying votes on governance proposals.
    properties:
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
          considered valid.
        type: string
      threshold:
        description: 'Minimum proportion of Yes votes for proposal to pass. Default
          value: 0.5.'
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
          vetoed. Default value: 1/3.
        type: string
    type: object
  cosmos.gov.v1.TallyResult:
    description: TallyResult defines a standard tally for a governance proposal.
    properties:
      abstain_count:
        description: abstain_count is the number of abstain votes on a proposal.
        type: string
      no_count:
        description: no_count is the number of no votes on a proposal.
        type: string
      no_with_veto_count:
        description: no_with_veto_count is the number of no with veto votes on a proposal.
        type: string
      yes_count:
        description: yes_count is the number of yes votes on a proposal.
        type: string
    type: object
  cosmos.gov.v1.Vote:
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
    properties:
      metadata:
        description: metadata is any  arbitrary metadata to attached to the vote.
        type: string
      options:
        description: options is the weighted vote options.
        items:
          $ref: '#/definitions/cosmos.gov.v1.WeightedVoteOption'
        type: array
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      voter:
        description: voter is the voter address of the proposal.
        type: string
    type: object
  cosmos.gov.v1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: |-
      VoteOption enumerates the valid vote options for a given governance proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
    - VOTE_OPTION_UNSPECIFIED
    - VOTE_OPTION_YES
    - VOTE_OPTION_ABSTAIN
    - VOTE_OPTION_NO
    - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.gov.v1.VotingParams:
    description: VotingParams defines the params for voting on governance proposals.
    properties:
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1.WeightedVoteOption:
    description: WeightedVoteOption defines a unit of vote for vote split.
    properties:
      option:
        $ref: '#/definitions/cosmos.gov.v1.VoteOption'
        description: option defines the valid vote options, it must not contain duplicate
          vote options.
      weight:
        description: weight is the vote weight associated with the vote option.
        type: string
    type: object
  cosmos.gov.v1beta1.Deposit:
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
    properties:
      amount:
        description: amount to be deposited by depositor.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      depositor:
        description: depositor defines the deposit addresses from the proposals.
        type: string
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
    type: object
  cosmos.gov.v1beta1.DepositParams:
    description: DepositParams defines the params for deposits on governance proposals.
    properties:
      max_deposit_period:
        description: |-
          Maximum period for Atom holders to deposit on a proposal. Initial value: 2
          months.
        type: string
      min_deposit:
        description: Minimum deposit for a proposal to enter voting period.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
    type: object
  cosmos.gov.v1beta1.Proposal:
    description: Proposal defines the core field members of a governance proposal.
    properties:
      content:
        $ref: '#/definitions/google.protobuf.Any'
        description: content is the proposal's content.
      deposit_end_time:
        description: deposit_end_time is the end time for deposition.
        format: date-time
        type: string
      final_tally_result:
        $ref: '#/definitions/cosmos.gov.v1beta1.TallyResult'
        description: |-
          final_tally_result is the final tally result of the proposal. When
          querying a proposal via gRPC, this field is not populated until the
          proposal's voting period has ended.
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      status:
        $ref: '#/definitions/cosmos.gov.v1beta1.ProposalStatus'
        description: status defines the proposal status.
      submit_time:
        description: submit_time is the time of proposal submission.
        format: date-time
        type: string
      total_deposit:
        description: total_deposit is the total deposit on the proposal.
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        type: array
      voting_end_time:
        description: voting_end_time is the end time of voting on a proposal.
        format: date-time
        type: string
      voting_start_time:
        description: voting_start_time is the starting time to vote on a proposal.
        format: date-time
        type: string
    type: object
  cosmos.gov.v1beta1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default proposal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
    enum:
    - PROPOSAL_STATUS_UNSPECIFIED
    - PROPOSAL_STATUS_DEPOSIT_PERIOD
    - PROPOSAL_STATUS_VOTING_PERIOD
    - PROPOSAL_STATUS_PASSED
    - PROPOSAL_STATUS_REJECTED
    - PROPOSAL_STATUS_FAILED
    type: string
  cosmos.gov.v1beta1.QueryDepositResponse:
    description: QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
    properties:
      deposit:
        $ref: '#/definitions/cosmos.gov.v1beta1.Deposit'
        description: deposit defines the requested deposit.
    type: object
  cosmos.gov.v1beta1.QueryDepositsResponse:
    description: QueryDepositsResponse is the response type for the Query/Deposits
      RPC method.
    properties:
      deposits:
        description: deposits defines the requested deposits.
        items:
          $ref: '#/definitions/cosmos.gov.v1beta1.Deposit'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.gov.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC
      method.
    properties:
      deposit_params:
        $ref: '#/definitions/cosmos.gov.v1beta1.DepositParams'
        description: deposit_params defines the parameters related to deposit.
      tally_params:
        $ref: '#/definitions/cosmos.gov.v1beta1.TallyParams'
        description: tally_params defines the parameters related to tally.
      voting_params:
        $ref: '#/definitions/cosmos.gov.v1beta1.VotingParams'
        description: voting_params defines the parameters related to voting.
    type: object
  cosmos.gov.v1beta1.QueryProposalResponse:
    description: QueryProposalResponse is the response type for the Query/Proposal
      RPC method.
    properties:
      proposal:
        $ref: '#/definitions/cosmos.gov.v1beta1.Proposal'
    type: object
  cosmos.gov.v1beta1.QueryProposalsResponse:
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      proposals:
        description: proposals defines all the requested governance proposals.
        items:
          $ref: '#/definitions/cosmos.gov.v1beta1.Proposal'
        type: array
    type: object
  cosmos.gov.v1beta1.QueryTallyResultResponse:
    description: QueryTallyResultResponse is the response type for the Query/Tally
      RPC method.
    properties:
      tally:
        $ref: '#/definitions/cosmos.gov.v1beta1.TallyResult'
        description: tally defines the requested tally.
    type: object
  cosmos.gov.v1beta1.QueryVoteResponse:
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    properties:
      vote:
        $ref: '#/definitions/cosmos.gov.v1beta1.Vote'
        description: vote defines the queried vote.
    type: object
  cosmos.gov.v1beta1.QueryVotesResponse:
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      votes:
        description: votes defines the queried votes.
        items:
          $ref: '#/definitions/cosmos.gov.v1beta1.Vote'
        type: array
    type: object
  cosmos.gov.v1beta1.TallyParams:
    description: TallyParams defines the params for tallying votes on governance proposals.
    properties:
      quorum:
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
          considered valid.
        format: byte
        type: string
      threshold:
        description: 'Minimum proportion of Yes votes for proposal to pass. Default
          value: 0.5.'
        format: byte
        type: string
      veto_threshold:
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
          vetoed. Default value: 1/3.
        format: byte
        type: string
    type: object
  cosmos.gov.v1beta1.TallyResult:
    description: TallyResult defines a standard tally for a governance proposal.
    properties:
      abstain:
        description: abstain is the number of abstain votes on a proposal.
        type: string
      "no":
        description: no is the number of no votes on a proposal.
        type: string
      no_with_veto:
        description: no_with_veto is the number of no with veto votes on a proposal.
        type: string
      "yes":
        description: yes is the number of yes votes on a proposal.
        type: string
    type: object
  cosmos.gov.v1beta1.Vote:
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
    properties:
      option:
        $ref: '#/definitions/cosmos.gov.v1beta1.VoteOption'
        description: |-
          Deprecated: Prefer to use `options` instead. This field is set in queries
          if and only if `len(options) == 1` and that option has weight 1. In all
          other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
      options:
        description: |-
          options is the weighted vote options.

          Since: cosmos-sdk 0.43
        items:
          $ref: '#/definitions/cosmos.gov.v1beta1.WeightedVoteOption'
        type: array
      proposal_id:
        description: proposal_id defines the unique id of the proposal.
        format: uint64
        type: string
      voter:
        description: voter is the voter address of the proposal.
        type: string
    type: object
  cosmos.gov.v1beta1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: |-
      VoteOption enumerates the valid vote options for a given governance proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
    - VOTE_OPTION_UNSPECIFIED
    - VOTE_OPTION_YES
    - VOTE_OPTION_ABSTAIN
    - VOTE_OPTION_NO
    - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.gov.v1beta1.VotingParams:
    description: VotingParams defines the params for voting on governance proposals.
    properties:
      voting_period:
        description: Duration of the voting period.
        type: string
    type: object
  cosmos.gov.v1beta1.WeightedVoteOption:
    description: |-
      WeightedVoteOption defines a unit of vote for vote split.

      Since: cosmos-sdk 0.43
    properties:
      option:
        $ref: '#/definitions/cosmos.gov.v1beta1.VoteOption'
        description: option defines the valid vote options, it must not contain duplicate
          vote options.
      weight:
        description: weight is the vote weight associated with the vote option.
        type: string
    type: object
  cosmos.group.v1.GroupInfo:
    description: GroupInfo represents the high-level on-chain information for a group.
    properties:
      admin:
        description: admin is the account address of the group's admin.
        type: string
      created_at:
        description: created_at is a timestamp specifying when a group was created.
        format: date-time
        type: string
      id:
        description: id is the unique ID of the group.
        format: uint64
        type: string
      metadata:
        description: metadata is any arbitrary metadata to attached to the group.
        type: string
      total_weight:
        description: total_weight is the sum of the group members' weights.
        type: string
      version:
        format: uint64
        title: |-
          version is used to track changes to a group's membership structure that
          would break existing proposals. Whenever any members weight is changed,
          or any member is added or removed this version is incremented and will
          cause proposals based on older versions of this group to fail
        type: string
    type: object
  cosmos.group.v1.GroupMember:
    description: GroupMember represents the relationship between a group and a member.
    properties:
      group_id:
        description: group_id is the unique ID of the group.
        format: uint64
        type: string
      member:
        $ref: '#/definitions/cosmos.group.v1.Member'
        description: member is the member data.
    type: object
  cosmos.group.v1.GroupPolicyInfo:
    description: GroupPolicyInfo represents the high-level on-chain information for
      a group policy.
    properties:
      address:
        description: address is the account address of group policy.
        type: string
      admin:
        description: admin is the account address of the group admin.
        type: string
      created_at:
        description: created_at is a timestamp specifying when a group policy was
          created.
        format: date-time
        type: string
      decision_policy:
        $ref: '#/definitions/google.protobuf.Any'
        description: decision_policy specifies the group policy's decision policy.
      group_id:
        description: group_id is the unique ID of the group.
        format: uint64
        type: string
      metadata:
        title: |-
          metadata is any arbitrary metadata attached to the group policy.
          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
        type: string
      version:
        description: |-
          version is used to track changes to a group's GroupPolicyInfo structure that
          would create a different result on a running proposal.
        format: uint64
        type: string
    type: object
  cosmos.group.v1.Member:
    description: |-
      Member represents a group member with an account address,
      non-zero weight, metadata and added_at timestamp.
    properties:
      added_at:
        description: added_at is a timestamp specifying when a member was added.
        format: date-time
        type: string
      address:
        description: address is the member's account address.
        type: string
      metadata:
        description: metadata is any arbitrary metadata attached to the member.
        type: string
      weight:
        description: weight is the member's voting weight that should be greater than
          0.
        type: string
    type: object
  cosmos.group.v1.Proposal:
    description: |-
      Proposal defines a group proposal. Any member of a group can submit a proposal
      for a group policy to decide upon.
      A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
      passes as well as some optional metadata associated with the proposal.
    properties:
      executor_result:
        $ref: '#/definitions/cosmos.group.v1.ProposalExecutorResult'
        description: executor_result is the final result of the proposal execution.
          Initial value is NotRun.
      final_tally_result:
        $ref: '#/definitions/cosmos.group.v1.TallyResult'
        description: |-
          final_tally_result contains the sums of all weighted votes for this
          proposal for each vote option. It is empty at submission, and only
          populated after tallying, at voting period end or at proposal execution,
          whichever happens first.
      group_policy_address:
        description: group_policy_address is the account address of group policy.
        type: string
      group_policy_version:
        description: |-
          group_policy_version tracks the version of the group policy at proposal submission.
          When a decision policy is changed, existing proposals from previous policy
          versions will become invalid with the `ABORTED` status.
          This field is here for informational purposes only.
        format: uint64
        type: string
      group_version:
        description: |-
          group_version tracks the version of the group at proposal submission.
          This field is here for informational purposes only.
        format: uint64
        type: string
      id:
        description: id is the unique id of the proposal.
        format: uint64
        type: string
      messages:
        description: messages is a list of `sdk.Msg`s that will be executed if the
          proposal passes.
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
      metadata:
        title: |-
          metadata is any arbitrary metadata attached to the proposal.
          the recommended format of the metadata is to be found here:
          https://docs.cosmos.network/v0.47/modules/group#proposal-4
        type: string
      proposers:
        description: proposers are the account addresses of the proposers.
        items:
          type: string
        type: array
      status:
        $ref: '#/definitions/cosmos.group.v1.ProposalStatus'
        description: status represents the high level position in the life cycle of
          the proposal. Initial value is Submitted.
      submit_time:
        description: submit_time is a timestamp specifying when a proposal was submitted.
        format: date-time
        type: string
      summary:
        description: 'Since: cosmos-sdk 0.47'
        title: summary is a short summary of the proposal
        type: string
      title:
        description: 'Since: cosmos-sdk 0.47'
        title: title is the title of the proposal
        type: string
      voting_period_end:
        description: |-
          voting_period_end is the timestamp before which voting must be done.
          Unless a successful MsgExec is called before (to execute a proposal whose
          tally is successful before the voting period ends), tallying will be done
          at this point, and the `final_tally_result`and `status` fields will be
          accordingly updated.
        format: date-time
        type: string
    type: object
  cosmos.group.v1.ProposalExecutorResult:
    default: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
    description: |-
      ProposalExecutorResult defines types of proposal executor results.

       - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED: An empty value is not allowed.
       - PROPOSAL_EXECUTOR_RESULT_NOT_RUN: We have not yet run the executor.
       - PROPOSAL_EXECUTOR_RESULT_SUCCESS: The executor was successful and proposed action updated state.
       - PROPOSAL_EXECUTOR_RESULT_FAILURE: The executor returned an error and proposed action didn't update state.
    enum:
    - PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED
    - PROPOSAL_EXECUTOR_RESULT_NOT_RUN
    - PROPOSAL_EXECUTOR_RESULT_SUCCESS
    - PROPOSAL_EXECUTOR_RESULT_FAILURE
    type: string
  cosmos.group.v1.ProposalStatus:
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus defines proposal statuses.

       - PROPOSAL_STATUS_UNSPECIFIED: An empty value is invalid and not allowed.
       - PROPOSAL_STATUS_SUBMITTED: Initial status of a proposal when submitted.
       - PROPOSAL_STATUS_ACCEPTED: Final status of a proposal when the final tally is done and the outcome
      passes the group policy's decision policy.
       - PROPOSAL_STATUS_REJECTED: Final status of a proposal when the final tally is done and the outcome
      is rejected by the group policy's decision policy.
       - PROPOSAL_STATUS_ABORTED: Final status of a proposal when the group policy is modified before the
      final tally.
       - PROPOSAL_STATUS_WITHDRAWN: A proposal can be withdrawn before the voting start time by the owner.
      When this happens the final status is Withdrawn.
    enum:
    - PROPOSAL_STATUS_UNSPECIFIED
    - PROPOSAL_STATUS_SUBMITTED
    - PROPOSAL_STATUS_ACCEPTED
    - PROPOSAL_STATUS_REJECTED
    - PROPOSAL_STATUS_ABORTED
    - PROPOSAL_STATUS_WITHDRAWN
    type: string
  cosmos.group.v1.QueryGroupInfoResponse:
    description: QueryGroupInfoResponse is the Query/GroupInfo response type.
    properties:
      info:
        $ref: '#/definitions/cosmos.group.v1.GroupInfo'
        description: info is the GroupInfo of the group.
    type: object
  cosmos.group.v1.QueryGroupMembersResponse:
    description: QueryGroupMembersResponse is the Query/GroupMembersResponse response
      type.
    properties:
      members:
        description: members are the members of the group with given group_id.
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupMember'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryGroupPoliciesByAdminResponse:
    description: QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin
      response type.
    properties:
      group_policies:
        description: group_policies are the group policies info with provided admin.
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupPolicyInfo'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryGroupPoliciesByGroupResponse:
    description: QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup
      response type.
    properties:
      group_policies:
        description: group_policies are the group policies info associated with the
          provided group.
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupPolicyInfo'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryGroupPolicyInfoResponse:
    description: QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response
      type.
    properties:
      info:
        $ref: '#/definitions/cosmos.group.v1.GroupPolicyInfo'
        description: info is the GroupPolicyInfo of the group policy.
    type: object
  cosmos.group.v1.QueryGroupsByAdminResponse:
    description: QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response
      type.
    properties:
      groups:
        description: groups are the groups info with the provided admin.
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupInfo'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryGroupsByMemberResponse:
    description: QueryGroupsByMemberResponse is the Query/GroupsByMember response
      type.
    properties:
      groups:
        description: groups are the groups info with the provided group member.
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupInfo'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryGroupsResponse:
    description: |-
      QueryGroupsResponse is the Query/Groups response type.

      Since: cosmos-sdk 0.47.1
    properties:
      groups:
        description: '`groups` is all the groups present in state.'
        items:
          $ref: '#/definitions/cosmos.group.v1.GroupInfo'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.group.v1.QueryProposalResponse:
    description: QueryProposalResponse is the Query/Proposal response type.
    properties:
      proposal:
        $ref: '#/definitions/cosmos.group.v1.Proposal'
        description: proposal is the proposal info.
    type: object
  cosmos.group.v1.QueryProposalsByGroupPolicyResponse:
    description: QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy
      response type.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      proposals:
        description: proposals are the proposals with given group policy.
        items:
          $ref: '#/definitions/cosmos.group.v1.Proposal'
        type: array
    type: object
  cosmos.group.v1.QueryTallyResultResponse:
    description: QueryTallyResultResponse is the Query/TallyResult response type.
    properties:
      tally:
        $ref: '#/definitions/cosmos.group.v1.TallyResult'
        description: tally defines the requested tally.
    type: object
  cosmos.group.v1.QueryVoteByProposalVoterResponse:
    description: QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter
      response type.
    properties:
      vote:
        $ref: '#/definitions/cosmos.group.v1.Vote'
        description: vote is the vote with given proposal_id and voter.
    type: object
  cosmos.group.v1.QueryVotesByProposalResponse:
    description: QueryVotesByProposalResponse is the Query/VotesByProposal response
      type.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      votes:
        description: votes are the list of votes for given proposal_id.
        items:
          $ref: '#/definitions/cosmos.group.v1.Vote'
        type: array
    type: object
  cosmos.group.v1.QueryVotesByVoterResponse:
    description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      votes:
        description: votes are the list of votes by given voter.
        items:
          $ref: '#/definitions/cosmos.group.v1.Vote'
        type: array
    type: object
  cosmos.group.v1.TallyResult:
    description: TallyResult represents the sum of weighted votes for each vote option.
    properties:
      abstain_count:
        description: abstain_count is the weighted sum of abstainers.
        type: string
      no_count:
        description: no_count is the weighted sum of no votes.
        type: string
      no_with_veto_count:
        description: no_with_veto_count is the weighted sum of veto.
        type: string
      yes_count:
        description: yes_count is the weighted sum of yes votes.
        type: string
    type: object
  cosmos.group.v1.Vote:
    description: Vote represents a vote for a proposal.
    properties:
      metadata:
        description: metadata is any arbitrary metadata attached to the vote.
        type: string
      option:
        $ref: '#/definitions/cosmos.group.v1.VoteOption'
        description: option is the voter's choice on the proposal.
      proposal_id:
        description: proposal is the unique ID of the proposal.
        format: uint64
        type: string
      submit_time:
        description: submit_time is the timestamp when the vote was submitted.
        format: date-time
        type: string
      voter:
        description: voter is the account address of the voter.
        type: string
    type: object
  cosmos.group.v1.VoteOption:
    default: VOTE_OPTION_UNSPECIFIED
    description: |-
      VoteOption enumerates the valid vote options for a given proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines an unspecified vote option which will
      return an error.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
    enum:
    - VOTE_OPTION_UNSPECIFIED
    - VOTE_OPTION_YES
    - VOTE_OPTION_ABSTAIN
    - VOTE_OPTION_NO
    - VOTE_OPTION_NO_WITH_VETO
    type: string
  cosmos.mint.v1beta1.Params:
    description: Params defines the parameters for the x/mint module.
    properties:
      blocks_per_year:
        format: uint64
        title: expected blocks per year
        type: string
      goal_bonded:
        title: goal of percent bonded atoms
        type: string
      inflation_max:
        title: maximum inflation rate
        type: string
      inflation_min:
        title: minimum inflation rate
        type: string
      inflation_rate_change:
        title: maximum annual change in inflation rate
        type: string
      mint_denom:
        title: type of coin to mint
        type: string
    type: object
  cosmos.mint.v1beta1.QueryAnnualProvisionsResponse:
    description: |-
      QueryAnnualProvisionsResponse is the response type for the
      Query/AnnualProvisions RPC method.
    properties:
      annual_provisions:
        description: annual_provisions is the current minting annual provisions value.
        format: byte
        type: string
    type: object
  cosmos.mint.v1beta1.QueryInflationResponse:
    description: |-
      QueryInflationResponse is the response type for the Query/Inflation RPC
      method.
    properties:
      inflation:
        description: inflation is the current minting inflation value.
        format: byte
        type: string
    type: object
  cosmos.mint.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is the response type for the Query/Params RPC
      method.
    properties:
      params:
        $ref: '#/definitions/cosmos.mint.v1beta1.Params'
        description: params defines the parameters of the module.
    type: object
  cosmos.nft.v1beta1.Class:
    description: Class defines the class of the nft type.
    properties:
      data:
        $ref: '#/definitions/google.protobuf.Any'
        title: data is the app specific metadata of the NFT class. Optional
      description:
        title: description is a brief description of nft classification. Optional
        type: string
      id:
        title: id defines the unique identifier of the NFT classification, similar
          to the contract address of ERC721
        type: string
      name:
        title: name defines the human-readable name of the NFT classification. Optional
        type: string
      symbol:
        title: symbol is an abbreviated name for nft classification. Optional
        type: string
      uri:
        title: uri for the class metadata stored off chain. It can define schema for
          Class and NFT `Data` attributes. Optional
        type: string
      uri_hash:
        title: uri_hash is a hash of the document pointed by uri. Optional
        type: string
    type: object
  cosmos.nft.v1beta1.NFT:
    description: NFT defines the NFT.
    properties:
      class_id:
        title: class_id associated with the NFT, similar to the contract address of
          ERC721
        type: string
      data:
        $ref: '#/definitions/google.protobuf.Any'
        title: data is an app specific data of the NFT. Optional
      id:
        title: id is a unique identifier of the NFT
        type: string
      uri:
        title: uri for the NFT metadata stored off chain
        type: string
      uri_hash:
        title: uri_hash is a hash of the document pointed by uri
        type: string
    type: object
  cosmos.nft.v1beta1.QueryBalanceResponse:
    properties:
      amount:
        format: uint64
        title: amount is the number of all NFTs of a given class owned by the owner
        type: string
    title: QueryBalanceResponse is the response type for the Query/Balance RPC method
    type: object
  cosmos.nft.v1beta1.QueryClassResponse:
    properties:
      class:
        $ref: '#/definitions/cosmos.nft.v1beta1.Class'
        description: class defines the class of the nft type.
    title: QueryClassResponse is the response type for the Query/Class RPC method
    type: object
  cosmos.nft.v1beta1.QueryClassesResponse:
    properties:
      classes:
        description: class defines the class of the nft type.
        items:
          $ref: '#/definitions/cosmos.nft.v1beta1.Class'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    title: QueryClassesResponse is the response type for the Query/Classes RPC method
    type: object
  cosmos.nft.v1beta1.QueryNFTResponse:
    properties:
      nft:
        $ref: '#/definitions/cosmos.nft.v1beta1.NFT'
        title: owner is the owner address of the nft
    title: QueryNFTResponse is the response type for the Query/NFT RPC method
    type: object
  cosmos.nft.v1beta1.QueryNFTsResponse:
    properties:
      nfts:
        items:
          $ref: '#/definitions/cosmos.nft.v1beta1.NFT'
        title: NFT defines the NFT
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    title: QueryNFTsResponse is the response type for the Query/NFTs RPC methods
    type: object
  cosmos.nft.v1beta1.QueryOwnerResponse:
    properties:
      owner:
        title: owner is the owner address of the nft
        type: string
    title: QueryOwnerResponse is the response type for the Query/Owner RPC method
    type: object
  cosmos.nft.v1beta1.QuerySupplyResponse:
    properties:
      amount:
        format: uint64
        title: amount is the number of all NFTs from the given class
        type: string
    title: QuerySupplyResponse is the response type for the Query/Supply RPC method
    type: object
  cosmos.orm.query.v1alpha1.GetResponse:
    description: GetResponse is the Query/Get response type.
    properties:
      result:
        $ref: '#/definitions/google.protobuf.Any'
        description: |-
          result is the result of the get query. If no value is found, the gRPC
          status code NOT_FOUND will be returned.
    type: object
  cosmos.orm.query.v1alpha1.IndexValue:
    description: IndexValue represents the value of a field in an ORM index expression.
    properties:
      bool:
        description: bool specifies a value for a bool index field.
        type: boolean
      bytes:
        description: bytes specifies a value for a bytes index field.
        format: byte
        type: string
      duration:
        description: duration specifies a value for a duration index field.
        type: string
      enum:
        description: enum specifies a value for an enum index field.
        type: string
      int:
        description: |-
          int64 specifies a value for an int32, sfixed32, int64, or sfixed64
          index field.
        format: int64
        type: string
      str:
        description: str specifies a value for a string index field.
        type: string
      timestamp:
        description: timestamp specifies a value for a timestamp index field.
        format: date-time
        type: string
      uint:
        description: |-
          uint specifies a value for an uint32, fixed32, uint64, or fixed64
          index field.
        format: uint64
        type: string
    type: object
  cosmos.orm.query.v1alpha1.ListRequest.Prefix:
    description: Prefix specifies the arguments to a prefix query.
    properties:
      values:
        description: |-
          values specifies the index values for the prefix query.
          It is valid to special a partial prefix with fewer values than
          the number of fields in the index.
        items:
          $ref: '#/definitions/cosmos.orm.query.v1alpha1.IndexValue'
        type: array
    type: object
  cosmos.orm.query.v1alpha1.ListRequest.Range:
    description: Range specifies the arguments to a range query.
    properties:
      end:
        description: |-
          end specifies the inclusive ending index values for the range query.
          It is valid to provide fewer values than the number of fields in the
          index.
        items:
          $ref: '#/definitions/cosmos.orm.query.v1alpha1.IndexValue'
        type: array
      start:
        description: |-
          start specifies the starting index values for the range query.
          It is valid to provide fewer values than the number of fields in the
          index.
        items:
          $ref: '#/definitions/cosmos.orm.query.v1alpha1.IndexValue'
        type: array
    type: object
  cosmos.orm.query.v1alpha1.ListResponse:
    description: ListResponse is the Query/List response type.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination is the pagination response.
      results:
        description: results are the results of the query.
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
    type: object
  cosmos.params.v1beta1.ParamChange:
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
    properties:
      key:
        type: string
      subspace:
        type: string
      value:
        type: string
    type: object
  cosmos.params.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      param:
        $ref: '#/definitions/cosmos.params.v1beta1.ParamChange'
        description: param defines the queried parameter.
    type: object
  cosmos.params.v1beta1.QuerySubspacesResponse:
    description: |-
      QuerySubspacesResponse defines the response types for querying for all
      registered subspaces and all keys for a subspace.

      Since: cosmos-sdk 0.46
    properties:
      subspaces:
        items:
          $ref: '#/definitions/cosmos.params.v1beta1.Subspace'
        type: array
    type: object
  cosmos.params.v1beta1.Subspace:
    description: |-
      Subspace defines a parameter subspace name and all the keys that exist for
      the subspace.

      Since: cosmos-sdk 0.46
    properties:
      keys:
        items:
          type: string
        type: array
      subspace:
        type: string
    type: object
  cosmos.slashing.v1beta1.Params:
    description: Params represents the parameters used for by the slashing module.
    properties:
      downtime_jail_duration:
        type: string
      min_signed_per_window:
        format: byte
        type: string
      signed_blocks_window:
        format: int64
        type: string
      slash_fraction_double_sign:
        format: byte
        type: string
      slash_fraction_downtime:
        format: byte
        type: string
    type: object
  cosmos.slashing.v1beta1.QueryParamsResponse:
    properties:
      params:
        $ref: '#/definitions/cosmos.slashing.v1beta1.Params'
    title: QueryParamsResponse is the response type for the Query/Params RPC method
    type: object
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    properties:
      val_signing_info:
        $ref: '#/definitions/cosmos.slashing.v1beta1.ValidatorSigningInfo'
        title: val_signing_info is the signing info of requested val cons address
    title: |-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
      method
    type: object
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    properties:
      info:
        items:
          $ref: '#/definitions/cosmos.slashing.v1beta1.ValidatorSigningInfo'
        title: info is the signing info of all validators
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
    title: |-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
      method
    type: object
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    description: |-
      ValidatorSigningInfo defines a validator's signing info for monitoring their
      liveness activity.
    properties:
      address:
        type: string
      index_offset:
        description: |-
          Index which is incremented each time the validator was a bonded
          in a block and may have signed a precommit or not. This in conjunction with the
          `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
        format: int64
        type: string
      jailed_until:
        description: Timestamp until which the validator is jailed due to liveness
          downtime.
        format: date-time
        type: string
      missed_blocks_counter:
        description: |-
          A counter kept to avoid unnecessary array reads.
          Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
        format: int64
        type: string
      start_height:
        format: int64
        title: Height at which validator was first a candidate OR was unjailed
        type: string
      tombstoned:
        description: |-
          Whether or not a validator has been tombstoned (killed out of validator set). It is set
          once the validator commits an equivocation or for any other configured misbehiavor.
        type: boolean
    type: object
  cosmos.staking.v1beta1.BondStatus:
    default: BOND_STATUS_UNSPECIFIED
    description: |-
      BondStatus is the status of a validator.

       - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
       - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
       - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
       - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
    enum:
    - BOND_STATUS_UNSPECIFIED
    - BOND_STATUS_UNBONDED
    - BOND_STATUS_UNBONDING
    - BOND_STATUS_BONDED
    type: string
  cosmos.staking.v1beta1.Commission:
    description: Commission defines commission parameters for a given validator.
    properties:
      commission_rates:
        $ref: '#/definitions/cosmos.staking.v1beta1.CommissionRates'
        description: commission_rates defines the initial commission rates to be used
          for creating a validator.
      update_time:
        description: update_time is the last time the commission rate was changed.
        format: date-time
        type: string
    type: object
  cosmos.staking.v1beta1.CommissionRates:
    description: |-
      CommissionRates defines the initial commission rates to be used for creating
      a validator.
    properties:
      max_change_rate:
        description: max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
        type: string
      max_rate:
        description: max_rate defines the maximum commission rate which validator
          can ever charge, as a fraction.
        type: string
      rate:
        description: rate is the commission rate charged to delegators, as a fraction.
        type: string
    type: object
  cosmos.staking.v1beta1.Delegation:
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
    properties:
      delegator_address:
        description: delegator_address is the bech32-encoded address of the delegator.
        type: string
      shares:
        description: shares define the delegation shares received.
        type: string
      validator_address:
        description: validator_address is the bech32-encoded address of the validator.
        type: string
    type: object
  cosmos.staking.v1beta1.DelegationResponse:
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
    properties:
      balance:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
      delegation:
        $ref: '#/definitions/cosmos.staking.v1beta1.Delegation'
    type: object
  cosmos.staking.v1beta1.Description:
    description: Description defines a validator description.
    properties:
      details:
        description: details define other optional details.
        type: string
      identity:
        description: identity defines an optional identity signature (ex. UPort or
          Keybase).
        type: string
      moniker:
        description: moniker defines a human-readable name for the validator.
        type: string
      security_contact:
        description: security_contact defines an optional email for security contact.
        type: string
      website:
        description: website defines an optional website link.
        type: string
    type: object
  cosmos.staking.v1beta1.HistoricalInfo:
    description: |-
      HistoricalInfo contains header and validator information for a given block.
      It is stored as part of staking module's state, which persists the `n` most
      recent HistoricalInfo
      (`n` is set by the staking module's `historical_entries` parameter).
    properties:
      header:
        $ref: '#/definitions/tendermint.types.Header'
      valset:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.Validator'
        type: array
    type: object
  cosmos.staking.v1beta1.Params:
    description: Params defines the parameters for the x/staking module.
    properties:
      bond_denom:
        description: bond_denom defines the bondable coin denomination.
        type: string
      historical_entries:
        description: historical_entries is the number of historical entries to persist.
        format: int64
        type: integer
      max_entries:
        description: max_entries is the max entries for either unbonding delegation
          or redelegation (per pair/trio).
        format: int64
        type: integer
      max_validators:
        description: max_validators is the maximum number of validators.
        format: int64
        type: integer
      min_commission_rate:
        title: min_commission_rate is the chain-wide minimum commission rate that
          a validator can charge their delegators
        type: string
      unbonding_time:
        description: unbonding_time is the time duration of unbonding.
        type: string
    type: object
  cosmos.staking.v1beta1.Pool:
    description: |-
      Pool is used for tracking bonded and not-bonded token supply of the bond
      denomination.
    properties:
      bonded_tokens:
        type: string
      not_bonded_tokens:
        type: string
    type: object
  cosmos.staking.v1beta1.QueryDelegationResponse:
    description: QueryDelegationResponse is response type for the Query/Delegation
      RPC method.
    properties:
      delegation_response:
        $ref: '#/definitions/cosmos.staking.v1beta1.DelegationResponse'
        description: delegation_responses defines the delegation info of a delegation.
    type: object
  cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
    description: |-
      QueryDelegatorDelegationsResponse is response type for the
      Query/DelegatorDelegations RPC method.
    properties:
      delegation_responses:
        description: delegation_responses defines all the delegations' info of a delegator.
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.DelegationResponse'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    type: object
  cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
    description: |-
      QueryUnbondingDelegatorDelegationsResponse is response type for the
      Query/UnbondingDelegatorDelegations RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      unbonding_responses:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.UnbondingDelegation'
        type: array
    type: object
  cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
    description: |-
      QueryDelegatorValidatorResponse response type for the
      Query/DelegatorValidator RPC method.
    properties:
      validator:
        $ref: '#/definitions/cosmos.staking.v1beta1.Validator'
        description: validator defines the validator info.
    type: object
  cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
    description: |-
      QueryDelegatorValidatorsResponse is response type for the
      Query/DelegatorValidators RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      validators:
        description: validators defines the validators' info of a delegator.
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.Validator'
        type: array
    type: object
  cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
    description: |-
      QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
      method.
    properties:
      hist:
        $ref: '#/definitions/cosmos.staking.v1beta1.HistoricalInfo'
        description: hist defines the historical info at the given height.
    type: object
  cosmos.staking.v1beta1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      params:
        $ref: '#/definitions/cosmos.staking.v1beta1.Params'
        description: params holds all the parameters of this module.
    type: object
  cosmos.staking.v1beta1.QueryPoolResponse:
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
    properties:
      pool:
        $ref: '#/definitions/cosmos.staking.v1beta1.Pool'
        description: pool defines the pool info.
    type: object
  cosmos.staking.v1beta1.QueryRedelegationsResponse:
    description: |-
      QueryRedelegationsResponse is response type for the Query/Redelegations RPC
      method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      redelegation_responses:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.RedelegationResponse'
        type: array
    type: object
  cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
    description: |-
      QueryDelegationResponse is response type for the Query/UnbondingDelegation
      RPC method.
    properties:
      unbond:
        $ref: '#/definitions/cosmos.staking.v1beta1.UnbondingDelegation'
        description: unbond defines the unbonding information of a delegation.
    type: object
  cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
    properties:
      delegation_responses:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.DelegationResponse'
        type: array
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
    title: |-
      QueryValidatorDelegationsResponse is response type for the
      Query/ValidatorDelegations RPC method
    type: object
  cosmos.staking.v1beta1.QueryValidatorResponse:
    properties:
      validator:
        $ref: '#/definitions/cosmos.staking.v1beta1.Validator'
        description: validator defines the validator info.
    title: QueryValidatorResponse is response type for the Query/Validator RPC method
    type: object
  cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
    description: |-
      QueryValidatorUnbondingDelegationsResponse is response type for the
      Query/ValidatorUnbondingDelegations RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      unbonding_responses:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.UnbondingDelegation'
        type: array
    type: object
  cosmos.staking.v1beta1.QueryValidatorsResponse:
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines the pagination in the response.
      validators:
        description: validators contains all the queried validators.
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.Validator'
        type: array
    title: QueryValidatorsResponse is response type for the Query/Validators RPC method
    type: object
  cosmos.staking.v1beta1.Redelegation:
    description: |-
      Redelegation contains the list of a particular delegator's redelegating bonds
      from a particular source validator to a particular destination validator.
    properties:
      delegator_address:
        description: delegator_address is the bech32-encoded address of the delegator.
        type: string
      entries:
        description: entries are the redelegation entries.
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.RedelegationEntry'
        type: array
      validator_dst_address:
        description: validator_dst_address is the validator redelegation destination
          operator address.
        type: string
      validator_src_address:
        description: validator_src_address is the validator redelegation source operator
          address.
        type: string
    type: object
  cosmos.staking.v1beta1.RedelegationEntry:
    description: RedelegationEntry defines a redelegation object with relevant metadata.
    properties:
      completion_time:
        description: completion_time defines the unix time for redelegation completion.
        format: date-time
        type: string
      creation_height:
        description: creation_height  defines the height which the redelegation took
          place.
        format: int64
        type: string
      initial_balance:
        description: initial_balance defines the initial balance when redelegation
          started.
        type: string
      shares_dst:
        description: shares_dst is the amount of destination-validator shares created
          by redelegation.
        type: string
      unbonding_id:
        format: uint64
        title: Incrementing id that uniquely identifies this entry
        type: string
      unbonding_on_hold_ref_count:
        format: int64
        title: Strictly positive if this entry's unbonding has been stopped by external
          modules
        type: string
    type: object
  cosmos.staking.v1beta1.RedelegationEntryResponse:
    description: |-
      RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
      contains a balance in addition to shares which is more suitable for client
      responses.
    properties:
      balance:
        type: string
      redelegation_entry:
        $ref: '#/definitions/cosmos.staking.v1beta1.RedelegationEntry'
    type: object
  cosmos.staking.v1beta1.RedelegationResponse:
    description: |-
      RedelegationResponse is equivalent to a Redelegation except that its entries
      contain a balance in addition to shares which is more suitable for client
      responses.
    properties:
      entries:
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.RedelegationEntryResponse'
        type: array
      redelegation:
        $ref: '#/definitions/cosmos.staking.v1beta1.Redelegation'
    type: object
  cosmos.staking.v1beta1.UnbondingDelegation:
    description: |-
      UnbondingDelegation stores all of a single delegator's unbonding bonds
      for a single validator in an time-ordered list.
    properties:
      delegator_address:
        description: delegator_address is the bech32-encoded address of the delegator.
        type: string
      entries:
        description: entries are the unbonding delegation entries.
        items:
          $ref: '#/definitions/cosmos.staking.v1beta1.UnbondingDelegationEntry'
        type: array
      validator_address:
        description: validator_address is the bech32-encoded address of the validator.
        type: string
    type: object
  cosmos.staking.v1beta1.UnbondingDelegationEntry:
    description: UnbondingDelegationEntry defines an unbonding object with relevant
      metadata.
    properties:
      balance:
        description: balance defines the tokens to receive at completion.
        type: string
      completion_time:
        description: completion_time is the unix time for unbonding completion.
        format: date-time
        type: string
      creation_height:
        description: creation_height is the height which the unbonding took place.
        format: int64
        type: string
      initial_balance:
        description: initial_balance defines the tokens initially scheduled to receive
          at completion.
        type: string
      unbonding_id:
        format: uint64
        title: Incrementing id that uniquely identifies this entry
        type: string
      unbonding_on_hold_ref_count:
        format: int64
        title: Strictly positive if this entry's unbonding has been stopped by external
          modules
        type: string
    type: object
  cosmos.staking.v1beta1.Validator:
    description: |-
      Validator defines a validator, together with the total amount of the
      Validator's bond shares and their exchange rate to coins. Slashing results in
      a decrease in the exchange rate, allowing correct calculation of future
      undelegations without iterating over delegators. When coins are delegated to
      this validator, the validator is credited with a delegation whose number of
      bond shares is based on the amount of coins delegated divided by the current
      exchange rate. Voting power can be calculated as total bonded shares
      multiplied by exchange rate.
    properties:
      commission:
        $ref: '#/definitions/cosmos.staking.v1beta1.Commission'
        description: commission defines the commission parameters.
      consensus_pubkey:
        $ref: '#/definitions/google.protobuf.Any'
        description: consensus_pubkey is the consensus public key of the validator,
          as a Protobuf Any.
      delegator_shares:
        description: delegator_shares defines total shares issued to a validator's
          delegators.
        type: string
      description:
        $ref: '#/definitions/cosmos.staking.v1beta1.Description'
        description: description defines the description terms for the validator.
      jailed:
        description: jailed defined whether the validator has been jailed from bonded
          status or not.
        type: boolean
      min_self_delegation:
        description: |-
          min_self_delegation is the validator's self declared minimum self delegation.

          Since: cosmos-sdk 0.46
        type: string
      operator_address:
        description: operator_address defines the address of the validator's operator;
          bech encoded in JSON.
        type: string
      status:
        $ref: '#/definitions/cosmos.staking.v1beta1.BondStatus'
        description: status is the validator status (bonded/unbonding/unbonded).
      tokens:
        description: tokens define the delegated tokens (incl. self-delegation).
        type: string
      unbonding_height:
        description: unbonding_height defines, if unbonding, the height at which this
          validator has begun unbonding.
        format: int64
        type: string
      unbonding_ids:
        items:
          format: uint64
          type: string
        title: list of unbonding ids, each uniquely identifing an unbonding of this
          validator
        type: array
      unbonding_on_hold_ref_count:
        format: int64
        title: strictly positive if this validator's unbonding has been stopped by
          external modules
        type: string
      unbonding_time:
        description: unbonding_time defines, if unbonding, the min time for the validator
          to complete unbonding.
        format: date-time
        type: string
    type: object
  cosmos.tx.signing.v1beta1.SignMode:
    default: SIGN_MODE_UNSPECIFIED
    description: |-
      SignMode represents a signing mode with its own security guarantees.

      This enum should be considered a registry of all known sign modes
      in the Cosmos ecosystem. Apps are not expected to support all known
      sign modes. Apps that would like to support custom  sign modes are
      encouraged to open a small PR against this file to add a new case
      to this SignMode enum describing their sign mode so that different
      apps have a consistent version of this enum.

       - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
      rejected.
       - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
      verified with raw bytes from Tx.
       - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
      human-readable textual representation on top of the binary representation
      from SIGN_MODE_DIRECT. It is currently not supported.
       - SIGN_MODE_DIRECT_AUX: SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
      SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
      require signers signing over other signers' `signer_info`. It also allows
      for adding Tips in transactions.

      Since: cosmos-sdk 0.46
       - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
      Amino JSON and will be removed in the future.
       - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
      SDK. Ref: https://eips.ethereum.org/EIPS/eip-191

      Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
      but is not implemented on the SDK by default. To enable EIP-191, you need
      to pass a custom `TxConfig` that has an implementation of
      `SignModeHandler` for EIP-191. The SDK may decide to fully support
      EIP-191 in the future.

      Since: cosmos-sdk 0.45.2
    enum:
    - SIGN_MODE_UNSPECIFIED
    - SIGN_MODE_DIRECT
    - SIGN_MODE_TEXTUAL
    - SIGN_MODE_DIRECT_AUX
    - SIGN_MODE_LEGACY_AMINO_JSON
    - SIGN_MODE_EIP_191
    type: string
  cosmos.tx.v1beta1.AuthInfo:
    description: |-
      AuthInfo describes the fee and signer modes that are used to sign a
      transaction.
    properties:
      fee:
        $ref: '#/definitions/cosmos.tx.v1beta1.Fee'
        description: |-
          Fee is the fee and gas limit for the transaction. The first signer is the
          primary signer and the one which pays the fee. The fee can be calculated
          based on the cost of evaluating the body and doing signature verification
          of the signers. This can be estimated via simulation.
      signer_infos:
        description: |-
          signer_infos defines the signing modes for the required signers. The number
          and order of elements must match the required signers from TxBody's
          messages. The first element is the primary signer and the one which pays
          the fee.
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.SignerInfo'
        type: array
      tip:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tip'
        description: |-
          Tip is the optional tip used for transactions fees paid in another denom.

          This field is ignored if the chain didn't enable tips, i.e. didn't add the
          `TipDecorator` in its posthandler.

          Since: cosmos-sdk 0.46
    type: object
  cosmos.tx.v1beta1.BroadcastMode:
    default: BROADCAST_MODE_UNSPECIFIED
    description: |-
      BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.

       - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
       - BROADCAST_MODE_BLOCK: DEPRECATED: use BROADCAST_MODE_SYNC instead,
      BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
       - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
      a CheckTx execution response only.
       - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
      immediately.
    enum:
    - BROADCAST_MODE_UNSPECIFIED
    - BROADCAST_MODE_BLOCK
    - BROADCAST_MODE_SYNC
    - BROADCAST_MODE_ASYNC
    type: string
  cosmos.tx.v1beta1.BroadcastTxRequest:
    description: |-
      BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
      RPC method.
    properties:
      mode:
        $ref: '#/definitions/cosmos.tx.v1beta1.BroadcastMode'
      tx_bytes:
        description: tx_bytes is the raw transaction.
        format: byte
        type: string
    type: object
  cosmos.tx.v1beta1.BroadcastTxResponse:
    description: |-
      BroadcastTxResponse is the response type for the
      Service.BroadcastTx method.
    properties:
      tx_response:
        $ref: '#/definitions/cosmos.base.abci.v1beta1.TxResponse'
        description: tx_response is the queried TxResponses.
    type: object
  cosmos.tx.v1beta1.Fee:
    description: |-
      Fee includes the amount of coins paid in fees and the maximum
      gas to be used by the transaction. The ratio yields an effective "gasprice",
      which must be above some miminum to be accepted into the mempool.
    properties:
      amount:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        title: amount is the amount of coins to be paid as a fee
        type: array
      gas_limit:
        format: uint64
        title: |-
          gas_limit is the maximum gas that can be used in transaction processing
          before an out of gas error occurs
        type: string
      granter:
        title: |-
          if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
          to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
          not support fee grants, this will fail
        type: string
      payer:
        description: |-
          if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
          the payer must be a tx signer (and thus have signed this field in AuthInfo).
          setting this field does *not* change the ordering of required signers for the transaction.
        type: string
    type: object
  cosmos.tx.v1beta1.GetBlockWithTxsResponse:
    description: |-
      GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.

      Since: cosmos-sdk 0.45.2
    properties:
      block:
        $ref: '#/definitions/tendermint.types.Block'
      block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: pagination defines a pagination for the response.
      txs:
        description: txs are the transactions in the block.
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        type: array
    type: object
  cosmos.tx.v1beta1.GetTxResponse:
    description: GetTxResponse is the response type for the Service.GetTx method.
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the queried transaction.
      tx_response:
        $ref: '#/definitions/cosmos.base.abci.v1beta1.TxResponse'
        description: tx_response is the queried TxResponses.
    type: object
  cosmos.tx.v1beta1.GetTxsEventResponse:
    description: |-
      GetTxsEventResponse is the response type for the Service.TxsByEvents
      RPC method.
    properties:
      pagination:
        $ref: '#/definitions/cosmos.base.query.v1beta1.PageResponse'
        description: |-
          pagination defines a pagination for the response.
          Deprecated post v0.46.x: use total instead.
      total:
        format: uint64
        title: total is total number of results available
        type: string
      tx_responses:
        description: tx_responses is the list of queried TxResponses.
        items:
          $ref: '#/definitions/cosmos.base.abci.v1beta1.TxResponse'
        type: array
      txs:
        description: txs is the list of queried transactions.
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        type: array
    type: object
  cosmos.tx.v1beta1.ModeInfo:
    description: ModeInfo describes the signing mode of a single or nested multisig
      signer.
    properties:
      multi:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Multi'
        title: multi represents a nested multisig signer
      single:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Single'
        title: single represents a single signer
    type: object
  cosmos.tx.v1beta1.ModeInfo.Multi:
    properties:
      bitarray:
        $ref: '#/definitions/cosmos.crypto.multisig.v1beta1.CompactBitArray'
        title: bitarray specifies which keys within the multisig are signing
      mode_infos:
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_infos is the corresponding modes of the signers of the multisig
          which could include nested multisig public keys
        type: array
    title: Multi is the mode info for a multisig public key
    type: object
  cosmos.tx.v1beta1.ModeInfo.Single:
    properties:
      mode:
        $ref: '#/definitions/cosmos.tx.signing.v1beta1.SignMode'
        title: mode is the signing mode of the single signer
    title: |-
      Single is the mode info for a single signer. It is structured as a message
      to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
      future
    type: object
  cosmos.tx.v1beta1.OrderBy:
    default: ORDER_BY_UNSPECIFIED
    description: |-
      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
       - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
       - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
    enum:
    - ORDER_BY_UNSPECIFIED
    - ORDER_BY_ASC
    - ORDER_BY_DESC
    title: OrderBy defines the sorting order
    type: string
  cosmos.tx.v1beta1.SignerInfo:
    description: |-
      SignerInfo describes the public key and signing mode of a single top-level
      signer.
    properties:
      mode_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_info describes the signing mode of the signer and is a nested
          structure to support nested multisig pubkey's
      public_key:
        $ref: '#/definitions/google.protobuf.Any'
        description: |-
          public_key is the public key of the signer. It is optional for accounts
          that already exist in state. If unset, the verifier can use the required \
          signer address for this position and lookup the public key.
      sequence:
        description: |-
          sequence is the sequence of the account, which describes the
          number of committed transactions signed by a given address. It is used to
          prevent replay attacks.
        format: uint64
        type: string
    type: object
  cosmos.tx.v1beta1.SimulateRequest:
    description: |-
      SimulateRequest is the request type for the Service.Simulate
      RPC method.
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: |-
          tx is the transaction to simulate.
          Deprecated. Send raw tx bytes instead.
      tx_bytes:
        description: |-
          tx_bytes is the raw transaction.

          Since: cosmos-sdk 0.43
        format: byte
        type: string
    type: object
  cosmos.tx.v1beta1.SimulateResponse:
    description: |-
      SimulateResponse is the response type for the
      Service.SimulateRPC method.
    properties:
      gas_info:
        $ref: '#/definitions/cosmos.base.abci.v1beta1.GasInfo'
        description: gas_info is the information about gas used in the simulation.
      result:
        $ref: '#/definitions/cosmos.base.abci.v1beta1.Result'
        description: result is the result of the simulation.
    type: object
  cosmos.tx.v1beta1.Tip:
    description: |-
      Tip is the tip used for meta-transactions.

      Since: cosmos-sdk 0.46
    properties:
      amount:
        items:
          $ref: '#/definitions/cosmos.base.v1beta1.Coin'
        title: amount is the amount of the tip
        type: array
      tipper:
        title: tipper is the address of the account paying for the tip
        type: string
    type: object
  cosmos.tx.v1beta1.Tx:
    description: Tx is the standard type used for broadcasting transactions.
    properties:
      auth_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.AuthInfo'
        title: |-
          auth_info is the authorization related content of the transaction,
          specifically signers, signer modes and fee
      body:
        $ref: '#/definitions/cosmos.tx.v1beta1.TxBody'
        title: body is the processable content of the transaction
      signatures:
        description: |-
          signatures is a list of signatures that matches the length and order of
          AuthInfo's signer_infos to allow connecting signature meta information like
          public key and signing mode by position.
        items:
          format: byte
          type: string
        type: array
    type: object
  cosmos.tx.v1beta1.TxBody:
    description: TxBody is the body of a transaction that all signers sign over.
    properties:
      extension_options:
        items:
          $ref: '#/definitions/google.protobuf.Any'
        title: |-
          extension_options are arbitrary options that can be added by chains
          when the default options are not sufficient. If any of these are present
          and can't be handled, the transaction will be rejected
        type: array
      memo:
        description: |-
          memo is any arbitrary note/comment to be added to the transaction.
          WARNING: in clients, any publicly exposed text should not be called memo,
          but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
        type: string
      messages:
        description: |-
          messages is a list of messages to be executed. The required signers of
          those messages define the number and order of elements in AuthInfo's
          signer_infos and Tx's signatures. Each required signer address is added to
          the list only the first time it occurs.
          By convention, the first required signer (usually from the first message)
          is referred to as the primary signer and pays the fee for the whole
          transaction.
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
      non_critical_extension_options:
        items:
          $ref: '#/definitions/google.protobuf.Any'
        title: |-
          extension_options are arbitrary options that can be added by chains
          when the default options are not sufficient. If any of these are present
          and can't be handled, they will be ignored
        type: array
      timeout_height:
        format: uint64
        title: |-
          timeout is the block height after which this transaction will not
          be processed by the chain
        type: string
    type: object
  cosmos.tx.v1beta1.TxDecodeAminoRequest:
    description: |-
      TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      amino_binary:
        format: byte
        type: string
    type: object
  cosmos.tx.v1beta1.TxDecodeAminoResponse:
    description: |-
      TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      amino_json:
        type: string
    type: object
  cosmos.tx.v1beta1.TxDecodeRequest:
    description: |-
      TxDecodeRequest is the request type for the Service.TxDecode
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      tx_bytes:
        description: tx_bytes is the raw transaction.
        format: byte
        type: string
    type: object
  cosmos.tx.v1beta1.TxDecodeResponse:
    description: |-
      TxDecodeResponse is the response type for the
      Service.TxDecode method.

      Since: cosmos-sdk 0.47
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the decoded transaction.
    type: object
  cosmos.tx.v1beta1.TxEncodeAminoRequest:
    description: |-
      TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      amino_json:
        type: string
    type: object
  cosmos.tx.v1beta1.TxEncodeAminoResponse:
    description: |-
      TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      amino_binary:
        format: byte
        type: string
    type: object
  cosmos.tx.v1beta1.TxEncodeRequest:
    description: |-
      TxEncodeRequest is the request type for the Service.TxEncode
      RPC method.

      Since: cosmos-sdk 0.47
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the transaction to encode.
    type: object
  cosmos.tx.v1beta1.TxEncodeResponse:
    description: |-
      TxEncodeResponse is the response type for the
      Service.TxEncode method.

      Since: cosmos-sdk 0.47
    properties:
      tx_bytes:
        description: tx_bytes is the encoded transaction bytes.
        format: byte
        type: string
    type: object
  cosmos.upgrade.v1beta1.ModuleVersion:
    description: |-
      ModuleVersion specifies a module and its consensus version.

      Since: cosmos-sdk 0.43
    properties:
      name:
        title: name of the app module
        type: string
      version:
        format: uint64
        title: consensus version of the app module
        type: string
    type: object
  cosmos.upgrade.v1beta1.Plan:
    description: Plan specifies information about a planned upgrade and when it should
      occur.
    properties:
      height:
        description: The height at which the upgrade must be performed.
        format: int64
        type: string
      info:
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
        type: string
      name:
        description: |-
          Sets the name for the upgrade. This name will be used by the upgraded
          version of the software to apply any special "on-upgrade" commands during
          the first BeginBlock method after the upgrade is applied. It is also used
          to detect whether a software version can handle a given upgrade. If no
          upgrade handler with this name has been set in the software, it will be
          assumed that the software is out-of-date when the upgrade Time or Height is
          reached and the software will exit.
        type: string
      time:
        description: |-
          Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
          has been removed from the SDK.
          If this field is not empty, an error will be thrown.
        format: date-time
        type: string
      upgraded_client_state:
        $ref: '#/definitions/google.protobuf.Any'
        description: |-
          Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
          moved to the IBC module in the sub module 02-client.
          If this field is not empty, an error will be thrown.
    type: object
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    description: |-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
      method.
    properties:
      height:
        description: height is the block height at which the plan was applied.
        format: int64
        type: string
    type: object
  cosmos.upgrade.v1beta1.QueryAuthorityResponse:
    description: 'Since: cosmos-sdk 0.46'
    properties:
      address:
        type: string
    title: QueryAuthorityResponse is the response type for Query/Authority
    type: object
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    description: |-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
      method.
    properties:
      plan:
        $ref: '#/definitions/cosmos.upgrade.v1beta1.Plan'
        description: plan is the current upgrade plan.
    type: object
  cosmos.upgrade.v1beta1.QueryModuleVersionsResponse:
    description: |-
      QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
      RPC method.

      Since: cosmos-sdk 0.43
    properties:
      module_versions:
        description: module_versions is a list of module names with their consensus
          versions.
        items:
          $ref: '#/definitions/cosmos.upgrade.v1beta1.ModuleVersion'
        type: array
    type: object
  cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
    description: |-
      QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
      RPC method.
    properties:
      upgraded_consensus_state:
        format: byte
        title: 'Since: cosmos-sdk 0.43'
        type: string
    type: object
  google.protobuf.Any:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    properties:
      type_url:
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
      value:
        description: Must be a valid serialized protocol buffer of the above specified
          type.
        format: byte
        type: string
    type: object
  grpc.gateway.runtime.Error:
    properties:
      code:
        format: int32
        type: integer
      details:
        items:
          $ref: '#/definitions/google.protobuf.Any'
        type: array
      error:
        type: string
      message:
        type: string
    type: object
  network.aviatrix.v1.Params:
    description: Params defines the parameters for the module.
    type: object
  network.aviatrix.v1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      params:
        $ref: '#/definitions/network.aviatrix.v1.Params'
        description: params holds all the parameters of this module.
    type: object
  network.scorum.v1.Params:
    description: Params defines the parameters for the module.
    properties:
      gas_adjust_coefficient:
        $ref: '#/definitions/cosmos.base.v1beta1.DecProto'
      gas_limit:
        $ref: '#/definitions/cosmos.base.v1beta1.IntProto'
      gas_unconditioned_amount:
        $ref: '#/definitions/cosmos.base.v1beta1.IntProto'
      sp_withdrawal_period_duration_seconds:
        format: int64
        type: integer
      sp_withdrawal_total_periods:
        format: int64
        type: integer
      supervisors:
        items:
          type: string
        type: array
      validators_reward:
        $ref: '#/definitions/network.scorum.v1.ValidatorsRewardParams'
    type: object
  network.scorum.v1.QueryParamsResponse:
    description: QueryParamsResponse is response type for the Query/Params RPC method.
    properties:
      params:
        $ref: '#/definitions/network.scorum.v1.Params'
        description: params holds all the parameters of this module.
    type: object
  network.scorum.v1.QueryWithdrawalsResponse:
    properties:
      withdrawals:
        items:
          $ref: '#/definitions/network.scorum.v1.SPWithdrawal'
        type: array
    type: object
  network.scorum.v1.SPWithdrawal:
    properties:
      created_at:
        format: uint64
        type: string
      from:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      period_duration_in_seconds:
        format: int64
        type: integer
      processed_period:
        format: int64
        type: integer
      to:
        type: string
      total:
        $ref: '#/definitions/cosmos.base.v1beta1.IntProto'
      total_periods:
        format: int64
        type: integer
    type: object
  network.scorum.v1.ValidatorsRewardParams:
    properties:
      block_reward:
        $ref: '#/definitions/cosmos.base.v1beta1.Coin'
      pool_address:
        type: string
    type: object
  tendermint.abci.Event:
    description: |-
      Event allows application developers to attach additional information to
      ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
      Later, transactions may be queried using these events.
    properties:
      attributes:
        items:
          $ref: '#/definitions/tendermint.abci.EventAttribute'
        type: array
      type:
        type: string
    type: object
  tendermint.abci.EventAttribute:
    description: EventAttribute is a single key-value pair, associated with an event.
    properties:
      index:
        type: boolean
      key:
        type: string
      value:
        type: string
    type: object
  tendermint.crypto.PublicKey:
    properties:
      ed25519:
        format: byte
        type: string
      secp256k1:
        format: byte
        type: string
    title: PublicKey defines the keys available for use with Validators
    type: object
  tendermint.p2p.DefaultNodeInfo:
    properties:
      channels:
        format: byte
        type: string
      default_node_id:
        type: string
      listen_addr:
        type: string
      moniker:
        type: string
      network:
        type: string
      other:
        $ref: '#/definitions/tendermint.p2p.DefaultNodeInfoOther'
      protocol_version:
        $ref: '#/definitions/tendermint.p2p.ProtocolVersion'
      version:
        type: string
    type: object
  tendermint.p2p.DefaultNodeInfoOther:
    properties:
      rpc_address:
        type: string
      tx_index:
        type: string
    type: object
  tendermint.p2p.ProtocolVersion:
    properties:
      app:
        format: uint64
        type: string
      block:
        format: uint64
        type: string
      p2p:
        format: uint64
        type: string
    type: object
  tendermint.types.Block:
    properties:
      data:
        $ref: '#/definitions/tendermint.types.Data'
      evidence:
        $ref: '#/definitions/tendermint.types.EvidenceList'
      header:
        $ref: '#/definitions/tendermint.types.Header'
      last_commit:
        $ref: '#/definitions/tendermint.types.Commit'
    type: object
  tendermint.types.BlockID:
    properties:
      hash:
        format: byte
        type: string
      part_set_header:
        $ref: '#/definitions/tendermint.types.PartSetHeader'
    title: BlockID
    type: object
  tendermint.types.BlockIDFlag:
    default: BLOCK_ID_FLAG_UNKNOWN
    enum:
    - BLOCK_ID_FLAG_UNKNOWN
    - BLOCK_ID_FLAG_ABSENT
    - BLOCK_ID_FLAG_COMMIT
    - BLOCK_ID_FLAG_NIL
    title: BlockIdFlag indicates which BlcokID the signature is for
    type: string
  tendermint.types.BlockParams:
    description: BlockParams contains limits on the block size.
    properties:
      max_bytes:
        format: int64
        title: |-
          Max block size, in bytes.
          Note: must be greater than 0
        type: string
      max_gas:
        format: int64
        title: |-
          Max gas per block.
          Note: must be greater or equal to -1
        type: string
    type: object
  tendermint.types.Commit:
    description: Commit contains the evidence that a block was committed by a set
      of validators.
    properties:
      block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
      height:
        format: int64
        type: string
      round:
        format: int32
        type: integer
      signatures:
        items:
          $ref: '#/definitions/tendermint.types.CommitSig'
        type: array
    type: object
  tendermint.types.CommitSig:
    description: CommitSig is a part of the Vote included in a Commit.
    properties:
      block_id_flag:
        $ref: '#/definitions/tendermint.types.BlockIDFlag'
      signature:
        format: byte
        type: string
      timestamp:
        format: date-time
        type: string
      validator_address:
        format: byte
        type: string
    type: object
  tendermint.types.ConsensusParams:
    description: |-
      ConsensusParams contains consensus critical parameters that determine the
      validity of blocks.
    properties:
      block:
        $ref: '#/definitions/tendermint.types.BlockParams'
      evidence:
        $ref: '#/definitions/tendermint.types.EvidenceParams'
      validator:
        $ref: '#/definitions/tendermint.types.ValidatorParams'
      version:
        $ref: '#/definitions/tendermint.types.VersionParams'
    type: object
  tendermint.types.Data:
    properties:
      txs:
        description: |-
          Txs that will be applied by state @ block.Height+1.
          NOTE: not all txs here are valid.  We're just agreeing on the order first.
          This means that block.AppHash does not include these txs.
        items:
          format: byte
          type: string
        type: array
    title: Data contains the set of transactions included in the block
    type: object
  tendermint.types.DuplicateVoteEvidence:
    description: DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
    properties:
      timestamp:
        format: date-time
        type: string
      total_voting_power:
        format: int64
        type: string
      validator_power:
        format: int64
        type: string
      vote_a:
        $ref: '#/definitions/tendermint.types.Vote'
      vote_b:
        $ref: '#/definitions/tendermint.types.Vote'
    type: object
  tendermint.types.Evidence:
    properties:
      duplicate_vote_evidence:
        $ref: '#/definitions/tendermint.types.DuplicateVoteEvidence'
      light_client_attack_evidence:
        $ref: '#/definitions/tendermint.types.LightClientAttackEvidence'
    type: object
  tendermint.types.EvidenceList:
    properties:
      evidence:
        items:
          $ref: '#/definitions/tendermint.types.Evidence'
        type: array
    type: object
  tendermint.types.EvidenceParams:
    description: EvidenceParams determine how we handle evidence of malfeasance.
    properties:
      max_age_duration:
        description: |-
          Max age of evidence, in time.

          It should correspond with an app's "unbonding period" or other similar
          mechanism for handling [Nothing-At-Stake
          attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
        type: string
      max_age_num_blocks:
        description: |-
          Max age of evidence, in blocks.

          The basic formula for calculating this is: MaxAgeDuration / {average block
          time}.
        format: int64
        type: string
      max_bytes:
        format: int64
        title: |-
          This sets the maximum size of total evidence in bytes that can be committed in a single block.
          and should fall comfortably under the max block bytes.
          Default is 1048576 or 1MB
        type: string
    type: object
  tendermint.types.Header:
    description: Header defines the structure of a block header.
    properties:
      app_hash:
        format: byte
        type: string
      chain_id:
        type: string
      consensus_hash:
        format: byte
        type: string
      data_hash:
        format: byte
        type: string
      evidence_hash:
        format: byte
        title: consensus info
        type: string
      height:
        format: int64
        type: string
      last_block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
        title: prev block info
      last_commit_hash:
        format: byte
        title: hashes of block data
        type: string
      last_results_hash:
        format: byte
        type: string
      next_validators_hash:
        format: byte
        type: string
      proposer_address:
        format: byte
        type: string
      time:
        format: date-time
        type: string
      validators_hash:
        format: byte
        title: hashes from the app output from the prev block
        type: string
      version:
        $ref: '#/definitions/tendermint.version.Consensus'
        title: basic block info
    type: object
  tendermint.types.LightBlock:
    properties:
      signed_header:
        $ref: '#/definitions/tendermint.types.SignedHeader'
      validator_set:
        $ref: '#/definitions/tendermint.types.ValidatorSet'
    type: object
  tendermint.types.LightClientAttackEvidence:
    description: LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
    properties:
      byzantine_validators:
        items:
          $ref: '#/definitions/tendermint.types.Validator'
        type: array
      common_height:
        format: int64
        type: string
      conflicting_block:
        $ref: '#/definitions/tendermint.types.LightBlock'
      timestamp:
        format: date-time
        type: string
      total_voting_power:
        format: int64
        type: string
    type: object
  tendermint.types.PartSetHeader:
    properties:
      hash:
        format: byte
        type: string
      total:
        format: int64
        type: integer
    title: PartsetHeader
    type: object
  tendermint.types.SignedHeader:
    properties:
      commit:
        $ref: '#/definitions/tendermint.types.Commit'
      header:
        $ref: '#/definitions/tendermint.types.Header'
    type: object
  tendermint.types.SignedMsgType:
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
    enum:
    - SIGNED_MSG_TYPE_UNKNOWN
    - SIGNED_MSG_TYPE_PREVOTE
    - SIGNED_MSG_TYPE_PRECOMMIT
    - SIGNED_MSG_TYPE_PROPOSAL
    type: string
  tendermint.types.Validator:
    properties:
      address:
        format: byte
        type: string
      proposer_priority:
        format: int64
        type: string
      pub_key:
        $ref: '#/definitions/tendermint.crypto.PublicKey'
      voting_power:
        format: int64
        type: string
    type: object
  tendermint.types.ValidatorParams:
    description: |-
      ValidatorParams restrict the public key types validators can use.
      NOTE: uses ABCI pubkey naming, not Amino names.
    properties:
      pub_key_types:
        items:
          type: string
        type: array
    type: object
  tendermint.types.ValidatorSet:
    properties:
      proposer:
        $ref: '#/definitions/tendermint.types.Validator'
      total_voting_power:
        format: int64
        type: string
      validators:
        items:
          $ref: '#/definitions/tendermint.types.Validator'
        type: array
    type: object
  tendermint.types.VersionParams:
    description: VersionParams contains the ABCI application version.
    properties:
      app:
        format: uint64
        type: string
    type: object
  tendermint.types.Vote:
    description: |-
      Vote represents a prevote, precommit, or commit vote from validators for
      consensus.
    properties:
      block_id:
        $ref: '#/definitions/tendermint.types.BlockID'
      height:
        format: int64
        type: string
      round:
        format: int32
        type: integer
      signature:
        format: byte
        type: string
      timestamp:
        format: date-time
        type: string
      type:
        $ref: '#/definitions/tendermint.types.SignedMsgType'
      validator_address:
        format: byte
        type: string
      validator_index:
        format: int32
        type: integer
    type: object
  tendermint.version.Consensus:
    description: |-
      Consensus captures the consensus rules for processing a block in the blockchain,
      including all blockchain data structures and the rules of the application's
      state transition machine.
    properties:
      app:
        format: uint64
        type: string
      block:
        format: uint64
        type: string
    type: object
info:
  description: ""
  title: HTTP API Console
  version: v1.0.0
paths: []
produces:
- application/json
swagger: "2.0"
